/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGR


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
extern "C" {
#endif

/* Remove global namespace pollution */
#if !defined(SWIG_NO_R_NO_REMAP)
# define R_NO_REMAP
#endif
#if !defined(SWIG_NO_STRICT_R_HEADERS)
# define STRICT_R_HEADERS
#endif

#include <Rdefines.h>
#include <Rversion.h>
#include <stdlib.h>
#include <assert.h>

#if R_VERSION >= R_Version(2,6,0)
#define VMAXTYPE void *
#else
#define VMAXTYPE char *
#endif

/*
  This is mainly a way to avoid having lots of local variables that may 
  conflict with those in the routine.

   Change name to R_SWIG_Callb....
*/
typedef struct RCallbackFunctionData {

  SEXP fun;
  SEXP userData;


  SEXP expr;
  SEXP retValue;
  int errorOccurred;

  SEXP el;  /* Temporary pointer used in the construction of the expression to call the R function. */

  struct RCallbackFunctionData *previous;   /* Stack */

} RCallbackFunctionData;

static RCallbackFunctionData  *callbackFunctionDataStack;


SWIGRUNTIME SEXP
R_SWIG_debug_getCallbackFunctionData()
{
  int n, i;
  SEXP ans;
  RCallbackFunctionData  *p = callbackFunctionDataStack;

  n = 0;
  while(p) { 
    n++;
    p = p->previous;
  }

  Rf_protect(ans = Rf_allocVector(VECSXP, n));
  for(p = callbackFunctionDataStack, i = 0; i < n; p = p->previous, i++) 
      SET_VECTOR_ELT(ans, i, p->fun);

  Rf_unprotect(1);

  return(ans);
}



SWIGRUNTIME RCallbackFunctionData *
R_SWIG_pushCallbackFunctionData(SEXP fun, SEXP userData)
{
   RCallbackFunctionData *el;
   el = (RCallbackFunctionData *) calloc(1, sizeof(RCallbackFunctionData));
   el->fun = fun;
   el->userData = userData;
   el->previous = callbackFunctionDataStack;

   callbackFunctionDataStack = el;

   return(el);
}


SWIGRUNTIME SEXP
R_SWIG_R_pushCallbackFunctionData(SEXP fun, SEXP userData)
{
    R_SWIG_pushCallbackFunctionData(fun, userData);
    return R_NilValue;
}

SWIGRUNTIME RCallbackFunctionData *
R_SWIG_getCallbackFunctionData()
{
  if(!callbackFunctionDataStack) {
    Rf_error("Supposedly impossible error occurred in the SWIG callback mechanism."
            "  No callback function data set.");
  }
  
  return callbackFunctionDataStack;
}

SWIGRUNTIME void
R_SWIG_popCallbackFunctionData(int doFree)
{
  RCallbackFunctionData  *el = NULL;
  if(!callbackFunctionDataStack)
    return ; /* Error !!! */

  el = callbackFunctionDataStack ;
  callbackFunctionDataStack = callbackFunctionDataStack->previous;

  if(doFree)
     free(el);
}


/*
  Interface to S function
      is(obj, type)
  which is to be used to determine if an 
  external pointer inherits from the right class.

  Ideally, we would like to be able to do this without an explicit call to the is() function.
  When the S4 class system uses its own SEXP types, then we will hopefully be able to do this
  in the C code.

  Should we make the expression static and preserve it to avoid the overhead of 
  allocating each time.
*/
SWIGRUNTIME int
R_SWIG_checkInherits(SEXP obj, SEXP tag, const char *type)
{
  SEXP e, val;
  int check_err = 0;

  Rf_protect(e = Rf_allocVector(LANGSXP, 3));
  SETCAR(e, Rf_install("extends"));

  SETCAR(CDR(e), Rf_mkString(CHAR(PRINTNAME(tag))));
  SETCAR(CDR(CDR(e)), Rf_mkString(type));

  val = R_tryEval(e, R_GlobalEnv, &check_err);
  Rf_unprotect(1);
  if(check_err) 
    return(0);


  return(LOGICAL(val)[0]);
}


SWIGRUNTIME void *
R_SWIG_resolveExternalRef(SEXP arg, const char * const type, const char * const argName, Rboolean nullOk)
{
  void *ptr;
  SEXP orig = arg;

  if(TYPEOF(arg) != EXTPTRSXP) 
    arg = GET_SLOT(arg, Rf_mkString("ref"));

  
  if(TYPEOF(arg) != EXTPTRSXP) {
    Rf_error("argument %s must be an external pointer (from an ExternalReference)", argName);
  }


  ptr = R_ExternalPtrAddr(arg);

  if(ptr == NULL && nullOk == (Rboolean) FALSE) {
    Rf_error("the external pointer (of type %s) for argument %s has value NULL", argName, type);
  }

  if(type[0] && R_ExternalPtrTag(arg) != Rf_install(type) && strcmp(type, "voidRef")
      && !R_SWIG_checkInherits(orig,  R_ExternalPtrTag(arg), type)) {
    Rf_error("the external pointer for argument %s has tag %s, not the expected value %s",
             argName, CHAR(PRINTNAME(R_ExternalPtrTag(arg))), type);
  }


  return(ptr);
}

SWIGRUNTIME void
R_SWIG_ReferenceFinalizer(SEXP el)
{
  void *ptr = R_SWIG_resolveExternalRef(el, "", "<finalizer>",  (Rboolean) 1);
  fprintf(stderr, "In R_SWIG_ReferenceFinalizer for %p\n", ptr);
  Rf_PrintValue(el);

  if(ptr) {
     if(TYPEOF(el) != EXTPTRSXP)
        el = GET_SLOT(el, Rf_mkString("ref"));

     if(TYPEOF(el) == EXTPTRSXP)
        R_ClearExternalPtr(el);

     free(ptr);
  }

  return;
}

typedef enum {R_SWIG_EXTERNAL, R_SWIG_OWNER } R_SWIG_Owner;

SWIGRUNTIME SEXP
SWIG_MakePtr(void *ptr, const char *typeName, R_SWIG_Owner owner)
{
  SEXP external, r_obj;
  const char *p = typeName;

  if(typeName[0] == '_')
     p = typeName + 1;

  Rf_protect(external = R_MakeExternalPtr(ptr, Rf_install(typeName), R_NilValue));
  Rf_protect(r_obj = NEW_OBJECT(MAKE_CLASS((char *) typeName)));

  if(owner)
    R_RegisterCFinalizer(external, R_SWIG_ReferenceFinalizer);

  r_obj = SET_SLOT(r_obj, Rf_mkString((char *) "ref"), external);
  SET_S4_OBJECT(r_obj);
  Rf_unprotect(2);

  return(r_obj);
}


SWIGRUNTIME SEXP
R_SWIG_create_SWIG_R_Array(const char *typeName, SEXP ref, int len)
{
   SEXP arr;

/*XXX remove the char * cast when we can. MAKE_CLASS should be declared appropriately. */
   Rf_protect(arr = NEW_OBJECT(MAKE_CLASS((char *) typeName)));
   Rf_protect(arr = R_do_slot_assign(arr, Rf_mkString("ref"), ref));
   Rf_protect(arr = R_do_slot_assign(arr, Rf_mkString("dims"), Rf_ScalarInteger(len)));

   Rf_unprotect(3); 			   
   SET_S4_OBJECT(arr);	
   return arr;
}

#define ADD_OUTPUT_ARG(result, pos, value, name)  r_ans = AddOutputArgToReturn(pos, value, name, OutputValues);

SWIGRUNTIME SEXP
AddOutputArgToReturn(int pos, SEXP value, const char *name, SEXP output)
{
  SET_VECTOR_ELT(output, pos, value);

  return(output);
}

/* Create a new pointer object */
SWIGRUNTIMEINLINE SEXP
SWIG_R_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  SEXP rptr = R_MakeExternalPtr(ptr, 
  R_MakeExternalPtr(type, R_NilValue, R_NilValue), R_NilValue); 
  SET_S4_OBJECT(rptr);
//  rptr = Rf_setAttrib(rptr, R_ClassSymbol, mkChar(SWIG_TypeName(type)));
  return rptr;
}

/* Convert a pointer value */
SWIGRUNTIMEINLINE int
SWIG_R_ConvertPtr(SEXP obj, void **ptr, swig_type_info *ty, int flags) {
  void *vptr;
  if (!obj) return SWIG_ERROR;
  if (obj == R_NilValue) {
    if (ptr) *ptr = NULL;
    return SWIG_OK;
  }

  vptr = R_ExternalPtrAddr(obj);
  if (ty) {
    swig_type_info *to = (swig_type_info*) 
      R_ExternalPtrAddr(R_ExternalPtrTag(obj));
    if (to == ty) {
      if (ptr) *ptr = vptr;
    } else {
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      int newmemory = 0;
      if (ptr) *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  } else {
      if (ptr) *ptr = vptr;
 }
  return SWIG_OK;
}

SWIGRUNTIME swig_module_info *
SWIG_GetModule(void *v) {
  static void *type_pointer = (void *)0;
  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_SetModule(void *v, swig_module_info *swig_module) {
}

typedef struct {
  void *pack;
  swig_type_info *ty;
  size_t size;
} RSwigPacked;

/* Create a new packed object */

SWIGRUNTIMEINLINE SEXP RSwigPacked_New(void *ptr, size_t sz,
		  swig_type_info *ty) {
  SEXP rptr;
  RSwigPacked *sobj = 
  (RSwigPacked*) malloc(sizeof(RSwigPacked));
  if (sobj) {
    void *pack = malloc(sz);
    if (pack) {
      memcpy(pack, ptr, sz);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = sz;
    } else {
      sobj = 0;
    }
  }
  rptr = R_MakeExternalPtr(sobj, R_NilValue, R_NilValue); 
  return rptr;
}

SWIGRUNTIME swig_type_info *
RSwigPacked_UnpackData(SEXP obj, void *ptr, size_t size)
{
    RSwigPacked *sobj = 
        (RSwigPacked *)R_ExternalPtrAddr(obj);
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
}

SWIGRUNTIMEINLINE SEXP
SWIG_R_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? RSwigPacked_New((void *) ptr, sz, type) : R_NilValue;
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_R_ConvertPacked(SEXP obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = RSwigPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { Rf_warning(msg); return Rf_ScalarLogical(NA_LOGICAL); return Rf_ScalarLogical(NA_LOGICAL); } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { Rf_warning(msg); return Rf_ScalarLogical(NA_LOGICAL); return Rf_ScalarLogical(NA_LOGICAL); } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_PEER__cAlphaNode swig_types[0]
#define SWIGTYPE_p_PEER__cEpsNode swig_types[1]
#define SWIGTYPE_p_PEER__cEpsNodeSparse swig_types[2]
#define SWIGTYPE_p_PEER__cPhenoNode swig_types[3]
#define SWIGTYPE_p_PEER__cSPARSEFA swig_types[4]
#define SWIGTYPE_p_PEER__cVBFA swig_types[5]
#define SWIGTYPE_p_PEER__cWNode swig_types[6]
#define SWIGTYPE_p_PEER__cWNodeSparse swig_types[7]
#define SWIGTYPE_p_PEER__cXNode swig_types[8]
#define SWIGTYPE_p_PMatrix swig_types[9]
#define SWIGTYPE_p_cBayesNet swig_types[10]
#define SWIGTYPE_p_char swig_types[11]
#define SWIGTYPE_p_int32_t swig_types[12]
#define SWIGTYPE_p_intialisation_types swig_types[13]
#define SWIGTYPE_p_p_float64_t swig_types[14]
static swig_type_info *swig_types[16];
static swig_module_info swig_module = {swig_types, 15, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




#define SWIGVERSION 0x020001 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#define SWIG_FILE_WITH_INIT
#include "vbfa.h"
#include "sparsefa.h"
//use namessace:
using namespace PEER;


extern "C" {
#include <R.h>
#include <Rinternals.h>
#include <Rdefines.h>
#include <R_ext/Rdynload.h>
#include <Rembedded.h>
#include <Rinterface.h>
#include <R_ext/RS.h>
#include <R_ext/Error.h>
}

/* workaround compile bug in R-modular interface */
#ifndef ScalarReal
#define ScalarReal      Rf_ScalarReal
#endif


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERNINLINE  int
SWIG_AsVal_long (SEXP obj, long *val)
{
   if (val) *val = Rf_asInteger(obj);
   return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_int (SEXP obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE SEXP
SWIG_From_double  (double value)
{
	return Rf_ScalarReal(value);
}


#include <float.h>


SWIGINTERNINLINE  int
SWIG_AsVal_double (SEXP obj, double *val)
{
   if (val) *val = Rf_asReal(obj);
   return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_float (SEXP obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE SEXP
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


SWIGINTERN int
SWIG_AsVal_bool (SEXP obj, bool *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res)) {    
    if (val) *val = v ? true : false;
    return res;
  }  
  return SWIG_TypeError;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT SEXP
R_swig_VERBOSE_set ( SEXP s_VERBOSE)
{
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(s_VERBOSE)[0]);
  VERBOSE = arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VERBOSE_get ( SEXP s_swig_copy)
{
  int result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (int)VERBOSE;
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_getVerbose ( SEXP s_swig_copy)
{
  int result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (int)PEER::getVerbose();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_setVerbose ( SEXP verbose)
{
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(verbose)[0]);
  PEER::setVerbose(arg1);
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_logdet ( SEXP m, SEXP s_swig_copy)
{
  double result;
  PMatrix arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    res1 = SWIG_R_ConvertPtr(m, &argp1, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "logdet" "', argument " "1"" of type '" "PMatrix""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "logdet" "', argument " "1"" of type '" "PMatrix""'");
    } else {
      arg1 = *(reinterpret_cast< PMatrix * >(argp1));
    }
  }
  result = (double)PEER::logdet(arg1);
  r_ans = SWIG_From_double(static_cast< double >(result));
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNode_E2S_set ( SEXP self, SEXP s_E2S)
{
  PEER::cWNode *arg1 = (PEER::cWNode *) 0 ;
  PMatrix arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNode_E2S_set" "', argument " "1"" of type '" "PEER::cWNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNode * >(argp1);
  {
    res2 = SWIG_R_ConvertPtr(s_E2S, &argp2, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cWNode_E2S_set" "', argument " "2"" of type '" "PMatrix""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cWNode_E2S_set" "', argument " "2"" of type '" "PMatrix""'");
    } else {
      arg2 = *(reinterpret_cast< PMatrix * >(argp2));
    }
  }
  if (arg1) (arg1)->E2S = arg2;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNode_E2S_get ( SEXP self, SEXP s_swig_copy)
{
  PMatrix result;
  PEER::cWNode *arg1 = (PEER::cWNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNode_E2S_get" "', argument " "1"" of type '" "PEER::cWNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNode * >(argp1);
  result =  ((arg1)->E2S);
  r_ans = SWIG_R_NewPointerObj((new PMatrix(static_cast< const PMatrix& >(result))), SWIGTYPE_p_PMatrix, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNode_Xprec_set ( SEXP self, SEXP s_Xprec)
{
  PEER::cWNode *arg1 = (PEER::cWNode *) 0 ;
  PMatrix arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNode_Xprec_set" "', argument " "1"" of type '" "PEER::cWNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNode * >(argp1);
  {
    res2 = SWIG_R_ConvertPtr(s_Xprec, &argp2, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cWNode_Xprec_set" "', argument " "2"" of type '" "PMatrix""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cWNode_Xprec_set" "', argument " "2"" of type '" "PMatrix""'");
    } else {
      arg2 = *(reinterpret_cast< PMatrix * >(argp2));
    }
  }
  if (arg1) (arg1)->Xprec = arg2;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNode_Xprec_get ( SEXP self, SEXP s_swig_copy)
{
  PMatrix result;
  PEER::cWNode *arg1 = (PEER::cWNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNode_Xprec_get" "', argument " "1"" of type '" "PEER::cWNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNode * >(argp1);
  result =  ((arg1)->Xprec);
  r_ans = SWIG_R_NewPointerObj((new PMatrix(static_cast< const PMatrix& >(result))), SWIGTYPE_p_PMatrix, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNode_A_last_set ( SEXP self, SEXP s_A_last)
{
  PEER::cWNode *arg1 = (PEER::cWNode *) 0 ;
  PMatrix arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNode_A_last_set" "', argument " "1"" of type '" "PEER::cWNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNode * >(argp1);
  {
    res2 = SWIG_R_ConvertPtr(s_A_last, &argp2, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cWNode_A_last_set" "', argument " "2"" of type '" "PMatrix""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cWNode_A_last_set" "', argument " "2"" of type '" "PMatrix""'");
    } else {
      arg2 = *(reinterpret_cast< PMatrix * >(argp2));
    }
  }
  if (arg1) (arg1)->A_last = arg2;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNode_A_last_get ( SEXP self, SEXP s_swig_copy)
{
  PMatrix result;
  PEER::cWNode *arg1 = (PEER::cWNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNode_A_last_get" "', argument " "1"" of type '" "PEER::cWNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNode * >(argp1);
  result =  ((arg1)->A_last);
  r_ans = SWIG_R_NewPointerObj((new PMatrix(static_cast< const PMatrix& >(result))), SWIGTYPE_p_PMatrix, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNode_E_last_set ( SEXP self, SEXP s_E_last)
{
  PEER::cWNode *arg1 = (PEER::cWNode *) 0 ;
  PMatrix arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNode_E_last_set" "', argument " "1"" of type '" "PEER::cWNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNode * >(argp1);
  {
    res2 = SWIG_R_ConvertPtr(s_E_last, &argp2, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cWNode_E_last_set" "', argument " "2"" of type '" "PMatrix""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cWNode_E_last_set" "', argument " "2"" of type '" "PMatrix""'");
    } else {
      arg2 = *(reinterpret_cast< PMatrix * >(argp2));
    }
  }
  if (arg1) (arg1)->E_last = arg2;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNode_E_last_get ( SEXP self, SEXP s_swig_copy)
{
  PMatrix result;
  PEER::cWNode *arg1 = (PEER::cWNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNode_E_last_get" "', argument " "1"" of type '" "PEER::cWNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNode * >(argp1);
  result =  ((arg1)->E_last);
  r_ans = SWIG_R_NewPointerObj((new PMatrix(static_cast< const PMatrix& >(result))), SWIGTYPE_p_PMatrix, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNode_XE2S_last_set ( SEXP self, SEXP s_XE2S_last)
{
  PEER::cWNode *arg1 = (PEER::cWNode *) 0 ;
  PMatrix arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNode_XE2S_last_set" "', argument " "1"" of type '" "PEER::cWNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNode * >(argp1);
  {
    res2 = SWIG_R_ConvertPtr(s_XE2S_last, &argp2, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cWNode_XE2S_last_set" "', argument " "2"" of type '" "PMatrix""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cWNode_XE2S_last_set" "', argument " "2"" of type '" "PMatrix""'");
    } else {
      arg2 = *(reinterpret_cast< PMatrix * >(argp2));
    }
  }
  if (arg1) (arg1)->XE2S_last = arg2;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNode_XE2S_last_get ( SEXP self, SEXP s_swig_copy)
{
  PMatrix result;
  PEER::cWNode *arg1 = (PEER::cWNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNode_XE2S_last_get" "', argument " "1"" of type '" "PEER::cWNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNode * >(argp1);
  result =  ((arg1)->XE2S_last);
  r_ans = SWIG_R_NewPointerObj((new PMatrix(static_cast< const PMatrix& >(result))), SWIGTYPE_p_PMatrix, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNode_lndetcovS_set ( SEXP self, SEXP s_lndetcovS)
{
  PEER::cWNode *arg1 = (PEER::cWNode *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNode_lndetcovS_set" "', argument " "1"" of type '" "PEER::cWNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNode * >(argp1);
  arg2 = static_cast< float >(REAL(s_lndetcovS)[0]);
  if (arg1) (arg1)->lndetcovS = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNode_lndetcovS_get ( SEXP self, SEXP s_swig_copy)
{
  float result;
  PEER::cWNode *arg1 = (PEER::cWNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNode_lndetcovS_get" "', argument " "1"" of type '" "PEER::cWNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNode * >(argp1);
  result = (float) ((arg1)->lndetcovS);
  r_ans = SWIG_From_float(static_cast< float >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_cWNode__SWIG_0 ( )
{
  PEER::cWNode *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (PEER::cWNode *)new PEER::cWNode();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PEER__cWNode, R_SWIG_OWNER |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_cWNode__SWIG_1 ( SEXP E1)
{
  PEER::cWNode *result = 0 ;
  PMatrix arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    res1 = SWIG_R_ConvertPtr(E1, &argp1, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_cWNode" "', argument " "1"" of type '" "PMatrix""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cWNode" "', argument " "1"" of type '" "PMatrix""'");
    } else {
      arg1 = *(reinterpret_cast< PMatrix * >(argp1));
    }
  }
  result = (PEER::cWNode *)new PEER::cWNode(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PEER__cWNode, R_SWIG_OWNER |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNode_update ( SEXP self, SEXP net)
{
  PEER::cWNode *arg1 = (PEER::cWNode *) 0 ;
  cBayesNet *arg2 = (cBayesNet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNode_update" "', argument " "1"" of type '" "PEER::cWNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNode * >(argp1);
  res2 = SWIG_R_ConvertPtr(net, &argp2, SWIGTYPE_p_cBayesNet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cWNode_update" "', argument " "2"" of type '" "cBayesNet *""'"); 
  }
  arg2 = reinterpret_cast< cBayesNet * >(argp2);
  (arg1)->update(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNode_calcBound ( SEXP self, SEXP net, SEXP s_swig_copy)
{
  double result;
  PEER::cWNode *arg1 = (PEER::cWNode *) 0 ;
  cBayesNet *arg2 = (cBayesNet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNode_calcBound" "', argument " "1"" of type '" "PEER::cWNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNode * >(argp1);
  res2 = SWIG_R_ConvertPtr(net, &argp2, SWIGTYPE_p_cBayesNet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cWNode_calcBound" "', argument " "2"" of type '" "cBayesNet *""'"); 
  }
  arg2 = reinterpret_cast< cBayesNet * >(argp2);
  result = (double)(arg1)->calcBound(arg2);
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNode_entropy ( SEXP self, SEXP s_swig_copy)
{
  double result;
  PEER::cWNode *arg1 = (PEER::cWNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNode_entropy" "', argument " "1"" of type '" "PEER::cWNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNode * >(argp1);
  result = (double)(arg1)->entropy();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNode_getE1 ( SEXP self)
{
  PEER::cWNode *arg1 = (PEER::cWNode *) 0 ;
  float64_t **arg2 = (float64_t **) 0 ;
  int32_t *arg3 = (int32_t *) 0 ;
  int32_t *arg4 = (int32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  {
    arg2 = (float64_t**) malloc(sizeof(float64_t*));
    arg3 = (int32_t*) malloc(sizeof(int32_t));
    arg4 = (int32_t*) malloc(sizeof(int32_t));
  }
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNode_getE1" "', argument " "1"" of type '" "PEER::cWNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNode * >(argp1);
  (arg1)->getE1(arg2,arg3,arg4);
  r_ans = R_NilValue;
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,0));
  r_nprotect += 1;
  r_ans = R_OutputValues;
  {
    float64_t* matrix = *arg2;
    int32_t num_feat = *arg3;
    int32_t num_vec = *arg4;
    
    Rf_protect( r_ans = Rf_allocMatrix(REALSXP, num_feat, num_vec) );
    
    for (int32_t i=0; i<num_vec; i++)
    {
      for (int32_t j=0; j<num_feat; j++)
      REAL(r_ans)[i*num_feat+j]=(double) matrix[i*num_feat+j];
    }
    Rf_unprotect(1);
    free(*arg2); free(arg2); free(arg3); free(arg4);
  }
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_cWNode ( SEXP self)
{
  PEER::cWNode *arg1 = (PEER::cWNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cWNode" "', argument " "1"" of type '" "PEER::cWNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNode * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cXNode_E2S_set ( SEXP self, SEXP s_E2S)
{
  PEER::cXNode *arg1 = (PEER::cXNode *) 0 ;
  PMatrix arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cXNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cXNode_E2S_set" "', argument " "1"" of type '" "PEER::cXNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cXNode * >(argp1);
  {
    res2 = SWIG_R_ConvertPtr(s_E2S, &argp2, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cXNode_E2S_set" "', argument " "2"" of type '" "PMatrix""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cXNode_E2S_set" "', argument " "2"" of type '" "PMatrix""'");
    } else {
      arg2 = *(reinterpret_cast< PMatrix * >(argp2));
    }
  }
  if (arg1) (arg1)->E2S = arg2;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cXNode_E2S_get ( SEXP self, SEXP s_swig_copy)
{
  PMatrix result;
  PEER::cXNode *arg1 = (PEER::cXNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cXNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cXNode_E2S_get" "', argument " "1"" of type '" "PEER::cXNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cXNode * >(argp1);
  result =  ((arg1)->E2S);
  r_ans = SWIG_R_NewPointerObj((new PMatrix(static_cast< const PMatrix& >(result))), SWIGTYPE_p_PMatrix, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cXNode_cov_set ( SEXP self, SEXP s_cov)
{
  PEER::cXNode *arg1 = (PEER::cXNode *) 0 ;
  PMatrix arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cXNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cXNode_cov_set" "', argument " "1"" of type '" "PEER::cXNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cXNode * >(argp1);
  {
    res2 = SWIG_R_ConvertPtr(s_cov, &argp2, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cXNode_cov_set" "', argument " "2"" of type '" "PMatrix""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cXNode_cov_set" "', argument " "2"" of type '" "PMatrix""'");
    } else {
      arg2 = *(reinterpret_cast< PMatrix * >(argp2));
    }
  }
  if (arg1) (arg1)->cov = arg2;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cXNode_cov_get ( SEXP self, SEXP s_swig_copy)
{
  PMatrix result;
  PEER::cXNode *arg1 = (PEER::cXNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cXNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cXNode_cov_get" "', argument " "1"" of type '" "PEER::cXNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cXNode * >(argp1);
  result =  ((arg1)->cov);
  r_ans = SWIG_R_NewPointerObj((new PMatrix(static_cast< const PMatrix& >(result))), SWIGTYPE_p_PMatrix, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cXNode_prior_offset_set ( SEXP self, SEXP s_prior_offset)
{
  PEER::cXNode *arg1 = (PEER::cXNode *) 0 ;
  PMatrix arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cXNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cXNode_prior_offset_set" "', argument " "1"" of type '" "PEER::cXNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cXNode * >(argp1);
  {
    res2 = SWIG_R_ConvertPtr(s_prior_offset, &argp2, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cXNode_prior_offset_set" "', argument " "2"" of type '" "PMatrix""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cXNode_prior_offset_set" "', argument " "2"" of type '" "PMatrix""'");
    } else {
      arg2 = *(reinterpret_cast< PMatrix * >(argp2));
    }
  }
  if (arg1) (arg1)->prior_offset = arg2;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cXNode_prior_offset_get ( SEXP self, SEXP s_swig_copy)
{
  PMatrix result;
  PEER::cXNode *arg1 = (PEER::cXNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cXNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cXNode_prior_offset_get" "', argument " "1"" of type '" "PEER::cXNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cXNode * >(argp1);
  result =  ((arg1)->prior_offset);
  r_ans = SWIG_R_NewPointerObj((new PMatrix(static_cast< const PMatrix& >(result))), SWIGTYPE_p_PMatrix, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cXNode_prior_prec_set ( SEXP self, SEXP s_prior_prec)
{
  PEER::cXNode *arg1 = (PEER::cXNode *) 0 ;
  PMatrix arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cXNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cXNode_prior_prec_set" "', argument " "1"" of type '" "PEER::cXNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cXNode * >(argp1);
  {
    res2 = SWIG_R_ConvertPtr(s_prior_prec, &argp2, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cXNode_prior_prec_set" "', argument " "2"" of type '" "PMatrix""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cXNode_prior_prec_set" "', argument " "2"" of type '" "PMatrix""'");
    } else {
      arg2 = *(reinterpret_cast< PMatrix * >(argp2));
    }
  }
  if (arg1) (arg1)->prior_prec = arg2;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cXNode_prior_prec_get ( SEXP self, SEXP s_swig_copy)
{
  PMatrix result;
  PEER::cXNode *arg1 = (PEER::cXNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cXNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cXNode_prior_prec_get" "', argument " "1"" of type '" "PEER::cXNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cXNode * >(argp1);
  result =  ((arg1)->prior_prec);
  r_ans = SWIG_R_NewPointerObj((new PMatrix(static_cast< const PMatrix& >(result))), SWIGTYPE_p_PMatrix, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_cXNode__SWIG_0 ( )
{
  PEER::cXNode *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (PEER::cXNode *)new PEER::cXNode();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PEER__cXNode, R_SWIG_OWNER |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_cXNode__SWIG_1 ( SEXP E1)
{
  PEER::cXNode *result = 0 ;
  PMatrix arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    res1 = SWIG_R_ConvertPtr(E1, &argp1, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_cXNode" "', argument " "1"" of type '" "PMatrix""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cXNode" "', argument " "1"" of type '" "PMatrix""'");
    } else {
      arg1 = *(reinterpret_cast< PMatrix * >(argp1));
    }
  }
  result = (PEER::cXNode *)new PEER::cXNode(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PEER__cXNode, R_SWIG_OWNER |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_cXNode__SWIG_2 ( SEXP E1, SEXP prior_offset, SEXP prior_prec)
{
  PEER::cXNode *result = 0 ;
  PMatrix arg1 ;
  PMatrix arg2 ;
  PMatrix arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    res1 = SWIG_R_ConvertPtr(E1, &argp1, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_cXNode" "', argument " "1"" of type '" "PMatrix""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cXNode" "', argument " "1"" of type '" "PMatrix""'");
    } else {
      arg1 = *(reinterpret_cast< PMatrix * >(argp1));
    }
  }
  {
    res2 = SWIG_R_ConvertPtr(prior_offset, &argp2, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_cXNode" "', argument " "2"" of type '" "PMatrix""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cXNode" "', argument " "2"" of type '" "PMatrix""'");
    } else {
      arg2 = *(reinterpret_cast< PMatrix * >(argp2));
    }
  }
  {
    res3 = SWIG_R_ConvertPtr(prior_prec, &argp3, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_cXNode" "', argument " "3"" of type '" "PMatrix""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cXNode" "', argument " "3"" of type '" "PMatrix""'");
    } else {
      arg3 = *(reinterpret_cast< PMatrix * >(argp3));
    }
  }
  result = (PEER::cXNode *)new PEER::cXNode(arg1,arg2,arg3);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PEER__cXNode, R_SWIG_OWNER |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cXNode_update ( SEXP self, SEXP net)
{
  PEER::cXNode *arg1 = (PEER::cXNode *) 0 ;
  cBayesNet *arg2 = (cBayesNet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cXNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cXNode_update" "', argument " "1"" of type '" "PEER::cXNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cXNode * >(argp1);
  res2 = SWIG_R_ConvertPtr(net, &argp2, SWIGTYPE_p_cBayesNet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cXNode_update" "', argument " "2"" of type '" "cBayesNet *""'"); 
  }
  arg2 = reinterpret_cast< cBayesNet * >(argp2);
  (arg1)->update(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cXNode_calcBound ( SEXP self, SEXP net, SEXP s_swig_copy)
{
  double result;
  PEER::cXNode *arg1 = (PEER::cXNode *) 0 ;
  cBayesNet *arg2 = (cBayesNet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cXNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cXNode_calcBound" "', argument " "1"" of type '" "PEER::cXNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cXNode * >(argp1);
  res2 = SWIG_R_ConvertPtr(net, &argp2, SWIGTYPE_p_cBayesNet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cXNode_calcBound" "', argument " "2"" of type '" "cBayesNet *""'"); 
  }
  arg2 = reinterpret_cast< cBayesNet * >(argp2);
  result = (double)(arg1)->calcBound(arg2);
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cXNode_entropy ( SEXP self, SEXP s_swig_copy)
{
  double result;
  PEER::cXNode *arg1 = (PEER::cXNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cXNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cXNode_entropy" "', argument " "1"" of type '" "PEER::cXNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cXNode * >(argp1);
  result = (double)(arg1)->entropy();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cXNode_getE1 ( SEXP self)
{
  PEER::cXNode *arg1 = (PEER::cXNode *) 0 ;
  float64_t **arg2 = (float64_t **) 0 ;
  int32_t *arg3 = (int32_t *) 0 ;
  int32_t *arg4 = (int32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  {
    arg2 = (float64_t**) malloc(sizeof(float64_t*));
    arg3 = (int32_t*) malloc(sizeof(int32_t));
    arg4 = (int32_t*) malloc(sizeof(int32_t));
  }
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cXNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cXNode_getE1" "', argument " "1"" of type '" "PEER::cXNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cXNode * >(argp1);
  (arg1)->getE1(arg2,arg3,arg4);
  r_ans = R_NilValue;
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,0));
  r_nprotect += 1;
  r_ans = R_OutputValues;
  {
    float64_t* matrix = *arg2;
    int32_t num_feat = *arg3;
    int32_t num_vec = *arg4;
    
    Rf_protect( r_ans = Rf_allocMatrix(REALSXP, num_feat, num_vec) );
    
    for (int32_t i=0; i<num_vec; i++)
    {
      for (int32_t j=0; j<num_feat; j++)
      REAL(r_ans)[i*num_feat+j]=(double) matrix[i*num_feat+j];
    }
    Rf_unprotect(1);
    free(*arg2); free(arg2); free(arg3); free(arg4);
  }
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_cXNode ( SEXP self)
{
  PEER::cXNode *arg1 = (PEER::cXNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cXNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cXNode" "', argument " "1"" of type '" "PEER::cXNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cXNode * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_cAlphaNode__SWIG_0 ( )
{
  PEER::cAlphaNode *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (PEER::cAlphaNode *)new PEER::cAlphaNode();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PEER__cAlphaNode, R_SWIG_OWNER |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_cAlphaNode__SWIG_1 ( SEXP dim, SEXP pa, SEXP pb, SEXP E1)
{
  PEER::cAlphaNode *result = 0 ;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  PMatrix arg4 ;
  void *argp4 ;
  int res4 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(dim)[0]);
  arg2 = static_cast< float >(REAL(pa)[0]);
  arg3 = static_cast< float >(REAL(pb)[0]);
  {
    res4 = SWIG_R_ConvertPtr(E1, &argp4, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_cAlphaNode" "', argument " "4"" of type '" "PMatrix""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cAlphaNode" "', argument " "4"" of type '" "PMatrix""'");
    } else {
      arg4 = *(reinterpret_cast< PMatrix * >(argp4));
    }
  }
  result = (PEER::cAlphaNode *)new PEER::cAlphaNode(arg1,arg2,arg3,arg4);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PEER__cAlphaNode, R_SWIG_OWNER |  0 );
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cAlphaNode_update ( SEXP self, SEXP net)
{
  PEER::cAlphaNode *arg1 = (PEER::cAlphaNode *) 0 ;
  cBayesNet *arg2 = (cBayesNet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cAlphaNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cAlphaNode_update" "', argument " "1"" of type '" "PEER::cAlphaNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cAlphaNode * >(argp1);
  res2 = SWIG_R_ConvertPtr(net, &argp2, SWIGTYPE_p_cBayesNet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cAlphaNode_update" "', argument " "2"" of type '" "cBayesNet *""'"); 
  }
  arg2 = reinterpret_cast< cBayesNet * >(argp2);
  (arg1)->update(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cAlphaNode_getE1 ( SEXP self)
{
  PEER::cAlphaNode *arg1 = (PEER::cAlphaNode *) 0 ;
  float64_t **arg2 = (float64_t **) 0 ;
  int32_t *arg3 = (int32_t *) 0 ;
  int32_t *arg4 = (int32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  {
    arg2 = (float64_t**) malloc(sizeof(float64_t*));
    arg3 = (int32_t*) malloc(sizeof(int32_t));
    arg4 = (int32_t*) malloc(sizeof(int32_t));
  }
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cAlphaNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cAlphaNode_getE1" "', argument " "1"" of type '" "PEER::cAlphaNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cAlphaNode * >(argp1);
  (arg1)->getE1(arg2,arg3,arg4);
  r_ans = R_NilValue;
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,0));
  r_nprotect += 1;
  r_ans = R_OutputValues;
  {
    float64_t* matrix = *arg2;
    int32_t num_feat = *arg3;
    int32_t num_vec = *arg4;
    
    Rf_protect( r_ans = Rf_allocMatrix(REALSXP, num_feat, num_vec) );
    
    for (int32_t i=0; i<num_vec; i++)
    {
      for (int32_t j=0; j<num_feat; j++)
      REAL(r_ans)[i*num_feat+j]=(double) matrix[i*num_feat+j];
    }
    Rf_unprotect(1);
    free(*arg2); free(arg2); free(arg3); free(arg4);
  }
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_cAlphaNode ( SEXP self)
{
  PEER::cAlphaNode *arg1 = (PEER::cAlphaNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cAlphaNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cAlphaNode" "', argument " "1"" of type '" "PEER::cAlphaNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cAlphaNode * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_cEpsNode__SWIG_0 ( )
{
  PEER::cEpsNode *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (PEER::cEpsNode *)new PEER::cEpsNode();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PEER__cEpsNode, R_SWIG_OWNER |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_cEpsNode__SWIG_1 ( SEXP dim, SEXP pa, SEXP pb, SEXP E1)
{
  PEER::cEpsNode *result = 0 ;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  PMatrix arg4 ;
  void *argp4 ;
  int res4 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(dim)[0]);
  arg2 = static_cast< float >(REAL(pa)[0]);
  arg3 = static_cast< float >(REAL(pb)[0]);
  {
    res4 = SWIG_R_ConvertPtr(E1, &argp4, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_cEpsNode" "', argument " "4"" of type '" "PMatrix""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cEpsNode" "', argument " "4"" of type '" "PMatrix""'");
    } else {
      arg4 = *(reinterpret_cast< PMatrix * >(argp4));
    }
  }
  result = (PEER::cEpsNode *)new PEER::cEpsNode(arg1,arg2,arg3,arg4);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PEER__cEpsNode, R_SWIG_OWNER |  0 );
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cEpsNode_update ( SEXP self, SEXP net)
{
  PEER::cEpsNode *arg1 = (PEER::cEpsNode *) 0 ;
  cBayesNet *arg2 = (cBayesNet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cEpsNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cEpsNode_update" "', argument " "1"" of type '" "PEER::cEpsNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cEpsNode * >(argp1);
  res2 = SWIG_R_ConvertPtr(net, &argp2, SWIGTYPE_p_cBayesNet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cEpsNode_update" "', argument " "2"" of type '" "cBayesNet *""'"); 
  }
  arg2 = reinterpret_cast< cBayesNet * >(argp2);
  (arg1)->update(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cEpsNode_getE1 ( SEXP self)
{
  PEER::cEpsNode *arg1 = (PEER::cEpsNode *) 0 ;
  float64_t **arg2 = (float64_t **) 0 ;
  int32_t *arg3 = (int32_t *) 0 ;
  int32_t *arg4 = (int32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  {
    arg2 = (float64_t**) malloc(sizeof(float64_t*));
    arg3 = (int32_t*) malloc(sizeof(int32_t));
    arg4 = (int32_t*) malloc(sizeof(int32_t));
  }
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cEpsNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cEpsNode_getE1" "', argument " "1"" of type '" "PEER::cEpsNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cEpsNode * >(argp1);
  (arg1)->getE1(arg2,arg3,arg4);
  r_ans = R_NilValue;
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,0));
  r_nprotect += 1;
  r_ans = R_OutputValues;
  {
    float64_t* matrix = *arg2;
    int32_t num_feat = *arg3;
    int32_t num_vec = *arg4;
    
    Rf_protect( r_ans = Rf_allocMatrix(REALSXP, num_feat, num_vec) );
    
    for (int32_t i=0; i<num_vec; i++)
    {
      for (int32_t j=0; j<num_feat; j++)
      REAL(r_ans)[i*num_feat+j]=(double) matrix[i*num_feat+j];
    }
    Rf_unprotect(1);
    free(*arg2); free(arg2); free(arg3); free(arg4);
  }
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_cEpsNode ( SEXP self)
{
  PEER::cEpsNode *arg1 = (PEER::cEpsNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cEpsNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cEpsNode" "', argument " "1"" of type '" "PEER::cEpsNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cEpsNode * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cPhenoNode_E1_set ( SEXP self, SEXP s_E1)
{
  PEER::cPhenoNode *arg1 = (PEER::cPhenoNode *) 0 ;
  PMatrix arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cPhenoNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cPhenoNode_E1_set" "', argument " "1"" of type '" "PEER::cPhenoNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cPhenoNode * >(argp1);
  {
    res2 = SWIG_R_ConvertPtr(s_E1, &argp2, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cPhenoNode_E1_set" "', argument " "2"" of type '" "PMatrix""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cPhenoNode_E1_set" "', argument " "2"" of type '" "PMatrix""'");
    } else {
      arg2 = *(reinterpret_cast< PMatrix * >(argp2));
    }
  }
  if (arg1) (arg1)->E1 = arg2;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cPhenoNode_E1_get ( SEXP self, SEXP s_swig_copy)
{
  PMatrix result;
  PEER::cPhenoNode *arg1 = (PEER::cPhenoNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cPhenoNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cPhenoNode_E1_get" "', argument " "1"" of type '" "PEER::cPhenoNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cPhenoNode * >(argp1);
  result =  ((arg1)->E1);
  r_ans = SWIG_R_NewPointerObj((new PMatrix(static_cast< const PMatrix& >(result))), SWIGTYPE_p_PMatrix, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cPhenoNode_E2_set ( SEXP self, SEXP s_E2)
{
  PEER::cPhenoNode *arg1 = (PEER::cPhenoNode *) 0 ;
  PMatrix arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cPhenoNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cPhenoNode_E2_set" "', argument " "1"" of type '" "PEER::cPhenoNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cPhenoNode * >(argp1);
  {
    res2 = SWIG_R_ConvertPtr(s_E2, &argp2, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cPhenoNode_E2_set" "', argument " "2"" of type '" "PMatrix""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cPhenoNode_E2_set" "', argument " "2"" of type '" "PMatrix""'");
    } else {
      arg2 = *(reinterpret_cast< PMatrix * >(argp2));
    }
  }
  if (arg1) (arg1)->E2 = arg2;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cPhenoNode_E2_get ( SEXP self, SEXP s_swig_copy)
{
  PMatrix result;
  PEER::cPhenoNode *arg1 = (PEER::cPhenoNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cPhenoNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cPhenoNode_E2_get" "', argument " "1"" of type '" "PEER::cPhenoNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cPhenoNode * >(argp1);
  result =  ((arg1)->E2);
  r_ans = SWIG_R_NewPointerObj((new PMatrix(static_cast< const PMatrix& >(result))), SWIGTYPE_p_PMatrix, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_cPhenoNode__SWIG_0 ( )
{
  PEER::cPhenoNode *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (PEER::cPhenoNode *)new PEER::cPhenoNode();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PEER__cPhenoNode, R_SWIG_OWNER |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_cPhenoNode__SWIG_1 ( SEXP pheno_mean, SEXP pheno_var)
{
  PEER::cPhenoNode *result = 0 ;
  PMatrix arg1 ;
  PMatrix arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    res1 = SWIG_R_ConvertPtr(pheno_mean, &argp1, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_cPhenoNode" "', argument " "1"" of type '" "PMatrix""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cPhenoNode" "', argument " "1"" of type '" "PMatrix""'");
    } else {
      arg1 = *(reinterpret_cast< PMatrix * >(argp1));
    }
  }
  {
    res2 = SWIG_R_ConvertPtr(pheno_var, &argp2, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_cPhenoNode" "', argument " "2"" of type '" "PMatrix""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cPhenoNode" "', argument " "2"" of type '" "PMatrix""'");
    } else {
      arg2 = *(reinterpret_cast< PMatrix * >(argp2));
    }
  }
  result = (PEER::cPhenoNode *)new PEER::cPhenoNode(arg1,arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PEER__cPhenoNode, R_SWIG_OWNER |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cPhenoNode_getE1 ( SEXP self)
{
  PEER::cPhenoNode *arg1 = (PEER::cPhenoNode *) 0 ;
  float64_t **arg2 = (float64_t **) 0 ;
  int32_t *arg3 = (int32_t *) 0 ;
  int32_t *arg4 = (int32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  {
    arg2 = (float64_t**) malloc(sizeof(float64_t*));
    arg3 = (int32_t*) malloc(sizeof(int32_t));
    arg4 = (int32_t*) malloc(sizeof(int32_t));
  }
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cPhenoNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cPhenoNode_getE1" "', argument " "1"" of type '" "PEER::cPhenoNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cPhenoNode * >(argp1);
  (arg1)->getE1(arg2,arg3,arg4);
  r_ans = R_NilValue;
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,0));
  r_nprotect += 1;
  r_ans = R_OutputValues;
  {
    float64_t* matrix = *arg2;
    int32_t num_feat = *arg3;
    int32_t num_vec = *arg4;
    
    Rf_protect( r_ans = Rf_allocMatrix(REALSXP, num_feat, num_vec) );
    
    for (int32_t i=0; i<num_vec; i++)
    {
      for (int32_t j=0; j<num_feat; j++)
      REAL(r_ans)[i*num_feat+j]=(double) matrix[i*num_feat+j];
    }
    Rf_unprotect(1);
    free(*arg2); free(arg2); free(arg3); free(arg4);
  }
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_cPhenoNode ( SEXP self)
{
  PEER::cPhenoNode *arg1 = (PEER::cPhenoNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cPhenoNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cPhenoNode" "', argument " "1"" of type '" "PEER::cPhenoNode *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cPhenoNode * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_Nj_set ( SEXP self, SEXP s_Nj)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_Nj_set" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  arg2 = static_cast< int >(INTEGER(s_Nj)[0]);
  if (arg1) (arg1)->Nj = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_Nj_get ( SEXP self, SEXP s_swig_copy)
{
  int result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_Nj_get" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (int) ((arg1)->Nj);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_Np_set ( SEXP self, SEXP s_Np)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_Np_set" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  arg2 = static_cast< int >(INTEGER(s_Np)[0]);
  if (arg1) (arg1)->Np = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_Np_get ( SEXP self, SEXP s_swig_copy)
{
  int result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_Np_get" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (int) ((arg1)->Np);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_Nk_set ( SEXP self, SEXP s_Nk)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_Nk_set" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  arg2 = static_cast< int >(INTEGER(s_Nk)[0]);
  if (arg1) (arg1)->Nk = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_Nk_get ( SEXP self, SEXP s_swig_copy)
{
  int result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_Nk_get" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (int) ((arg1)->Nk);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_Nc_set ( SEXP self, SEXP s_Nc)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_Nc_set" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  arg2 = static_cast< int >(INTEGER(s_Nc)[0]);
  if (arg1) (arg1)->Nc = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_Nc_get ( SEXP self, SEXP s_swig_copy)
{
  int result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_Nc_get" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (int) ((arg1)->Nc);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_Alpha_pa_set ( SEXP self, SEXP s_Alpha_pa)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_Alpha_pa_set" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  arg2 = static_cast< double >(REAL(s_Alpha_pa)[0]);
  if (arg1) (arg1)->Alpha_pa = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_Alpha_pa_get ( SEXP self, SEXP s_swig_copy)
{
  double result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_Alpha_pa_get" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (double) ((arg1)->Alpha_pa);
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_Alpha_pb_set ( SEXP self, SEXP s_Alpha_pb)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_Alpha_pb_set" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  arg2 = static_cast< double >(REAL(s_Alpha_pb)[0]);
  if (arg1) (arg1)->Alpha_pb = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_Alpha_pb_get ( SEXP self, SEXP s_swig_copy)
{
  double result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_Alpha_pb_get" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (double) ((arg1)->Alpha_pb);
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_Eps_pa_set ( SEXP self, SEXP s_Eps_pa)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_Eps_pa_set" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  arg2 = static_cast< double >(REAL(s_Eps_pa)[0]);
  if (arg1) (arg1)->Eps_pa = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_Eps_pa_get ( SEXP self, SEXP s_swig_copy)
{
  double result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_Eps_pa_get" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (double) ((arg1)->Eps_pa);
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_Eps_pb_set ( SEXP self, SEXP s_Eps_pb)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_Eps_pb_set" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  arg2 = static_cast< double >(REAL(s_Eps_pb)[0]);
  if (arg1) (arg1)->Eps_pb = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_Eps_pb_get ( SEXP self, SEXP s_swig_copy)
{
  double result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_Eps_pb_get" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (double) ((arg1)->Eps_pb);
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_Nmax_iterations_set ( SEXP self, SEXP s_Nmax_iterations)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_Nmax_iterations_set" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  arg2 = static_cast< int >(INTEGER(s_Nmax_iterations)[0]);
  if (arg1) (arg1)->Nmax_iterations = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_Nmax_iterations_get ( SEXP self, SEXP s_swig_copy)
{
  int result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_Nmax_iterations_get" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (int) ((arg1)->Nmax_iterations);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_tolerance_set ( SEXP self, SEXP s_tolerance)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_tolerance_set" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  arg2 = static_cast< double >(REAL(s_tolerance)[0]);
  if (arg1) (arg1)->tolerance = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_tolerance_get ( SEXP self, SEXP s_swig_copy)
{
  double result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_tolerance_get" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (double) ((arg1)->tolerance);
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_var_tolerance_set ( SEXP self, SEXP s_var_tolerance)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_var_tolerance_set" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  arg2 = static_cast< double >(REAL(s_var_tolerance)[0]);
  if (arg1) (arg1)->var_tolerance = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_var_tolerance_get ( SEXP self, SEXP s_swig_copy)
{
  double result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_var_tolerance_get" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (double) ((arg1)->var_tolerance);
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_covariate_prec_set ( SEXP self, SEXP s_covariate_prec)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_covariate_prec_set" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  arg2 = static_cast< double >(REAL(s_covariate_prec)[0]);
  if (arg1) (arg1)->covariate_prec = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_covariate_prec_get ( SEXP self, SEXP s_swig_copy)
{
  double result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_covariate_prec_get" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (double) ((arg1)->covariate_prec);
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_is_initialized_set ( SEXP self, SEXP s_is_initialized)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_is_initialized_set" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  arg2 = LOGICAL(s_is_initialized)[0] ? true : false;
  if (arg1) (arg1)->is_initialized = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_is_initialized_get ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_is_initialized_get" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (bool) ((arg1)->is_initialized);
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_add_mean_set ( SEXP self, SEXP s_add_mean)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_add_mean_set" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  arg2 = LOGICAL(s_add_mean)[0] ? true : false;
  if (arg1) (arg1)->add_mean = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_add_mean_get ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_add_mean_get" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (bool) ((arg1)->add_mean);
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_initialisation_set ( SEXP self, SEXP s_initialisation)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  intialisation_types arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_initialisation_set" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  {
    res2 = SWIG_R_ConvertPtr(s_initialisation, &argp2, SWIGTYPE_p_intialisation_types,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VBFA_initialisation_set" "', argument " "2"" of type '" "intialisation_types""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VBFA_initialisation_set" "', argument " "2"" of type '" "intialisation_types""'");
    } else {
      arg2 = *(reinterpret_cast< intialisation_types * >(argp2));
    }
  }
  if (arg1) (arg1)->initialisation = arg2;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_initialisation_get ( SEXP self, SEXP s_swig_copy)
{
  intialisation_types result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_initialisation_get" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result =  ((arg1)->initialisation);
  r_ans = SWIG_R_NewPointerObj((new intialisation_types(static_cast< const intialisation_types& >(result))), SWIGTYPE_p_intialisation_types, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_pheno_mean_set ( SEXP self, SEXP s_pheno_mean)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  PMatrix arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_pheno_mean_set" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  {
    res2 = SWIG_R_ConvertPtr(s_pheno_mean, &argp2, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VBFA_pheno_mean_set" "', argument " "2"" of type '" "PMatrix""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VBFA_pheno_mean_set" "', argument " "2"" of type '" "PMatrix""'");
    } else {
      arg2 = *(reinterpret_cast< PMatrix * >(argp2));
    }
  }
  if (arg1) (arg1)->pheno_mean = arg2;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_pheno_mean_get ( SEXP self, SEXP s_swig_copy)
{
  PMatrix result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_pheno_mean_get" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result =  ((arg1)->pheno_mean);
  r_ans = SWIG_R_NewPointerObj((new PMatrix(static_cast< const PMatrix& >(result))), SWIGTYPE_p_PMatrix, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_pheno_var_set ( SEXP self, SEXP s_pheno_var)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  PMatrix arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_pheno_var_set" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  {
    res2 = SWIG_R_ConvertPtr(s_pheno_var, &argp2, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VBFA_pheno_var_set" "', argument " "2"" of type '" "PMatrix""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VBFA_pheno_var_set" "', argument " "2"" of type '" "PMatrix""'");
    } else {
      arg2 = *(reinterpret_cast< PMatrix * >(argp2));
    }
  }
  if (arg1) (arg1)->pheno_var = arg2;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_pheno_var_get ( SEXP self, SEXP s_swig_copy)
{
  PMatrix result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_pheno_var_get" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result =  ((arg1)->pheno_var);
  r_ans = SWIG_R_NewPointerObj((new PMatrix(static_cast< const PMatrix& >(result))), SWIGTYPE_p_PMatrix, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_covs_set ( SEXP self, SEXP s_covs)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  PMatrix arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_covs_set" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  {
    res2 = SWIG_R_ConvertPtr(s_covs, &argp2, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VBFA_covs_set" "', argument " "2"" of type '" "PMatrix""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VBFA_covs_set" "', argument " "2"" of type '" "PMatrix""'");
    } else {
      arg2 = *(reinterpret_cast< PMatrix * >(argp2));
    }
  }
  if (arg1) (arg1)->covs = arg2;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_covs_get ( SEXP self, SEXP s_swig_copy)
{
  PMatrix result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_covs_get" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result =  ((arg1)->covs);
  r_ans = SWIG_R_NewPointerObj((new PMatrix(static_cast< const PMatrix& >(result))), SWIGTYPE_p_PMatrix, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_init_params ( SEXP self)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_init_params" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  (arg1)->init_params();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_calc_residuals ( SEXP self, SEXP s_swig_copy)
{
  PMatrix result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_calc_residuals" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (arg1)->calc_residuals();
  r_ans = SWIG_R_NewPointerObj((new PMatrix(static_cast< const PMatrix& >(result))), SWIGTYPE_p_PMatrix, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_W_set ( SEXP self, SEXP s_W)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  PEER::cWNode *arg2 = (PEER::cWNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_W_set" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_W, &argp2, SWIGTYPE_p_PEER__cWNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VBFA_W_set" "', argument " "2"" of type '" "PEER::cWNode *""'"); 
  }
  arg2 = reinterpret_cast< PEER::cWNode * >(argp2);
  if (arg1) (arg1)->W = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_W_get ( SEXP self)
{
  PEER::cWNode *result = 0 ;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_W_get" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (PEER::cWNode *) ((arg1)->W);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PEER__cWNode, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_X_set ( SEXP self, SEXP s_X)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  PEER::cXNode *arg2 = (PEER::cXNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_X_set" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_X, &argp2, SWIGTYPE_p_PEER__cXNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VBFA_X_set" "', argument " "2"" of type '" "PEER::cXNode *""'"); 
  }
  arg2 = reinterpret_cast< PEER::cXNode * >(argp2);
  if (arg1) (arg1)->X = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_X_get ( SEXP self)
{
  PEER::cXNode *result = 0 ;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_X_get" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (PEER::cXNode *) ((arg1)->X);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PEER__cXNode, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_Eps_set ( SEXP self, SEXP s_Eps)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  PEER::cEpsNode *arg2 = (PEER::cEpsNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_Eps_set" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_Eps, &argp2, SWIGTYPE_p_PEER__cEpsNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VBFA_Eps_set" "', argument " "2"" of type '" "PEER::cEpsNode *""'"); 
  }
  arg2 = reinterpret_cast< PEER::cEpsNode * >(argp2);
  if (arg1) (arg1)->Eps = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_Eps_get ( SEXP self)
{
  PEER::cEpsNode *result = 0 ;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_Eps_get" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (PEER::cEpsNode *) ((arg1)->Eps);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PEER__cEpsNode, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_Alpha_set ( SEXP self, SEXP s_Alpha)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  PEER::cAlphaNode *arg2 = (PEER::cAlphaNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_Alpha_set" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_Alpha, &argp2, SWIGTYPE_p_PEER__cAlphaNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VBFA_Alpha_set" "', argument " "2"" of type '" "PEER::cAlphaNode *""'"); 
  }
  arg2 = reinterpret_cast< PEER::cAlphaNode * >(argp2);
  if (arg1) (arg1)->Alpha = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_Alpha_get ( SEXP self)
{
  PEER::cAlphaNode *result = 0 ;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_Alpha_get" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (PEER::cAlphaNode *) ((arg1)->Alpha);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PEER__cAlphaNode, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_pheno_set ( SEXP self, SEXP s_pheno)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  PEER::cPhenoNode *arg2 = (PEER::cPhenoNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_pheno_set" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_pheno, &argp2, SWIGTYPE_p_PEER__cPhenoNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VBFA_pheno_set" "', argument " "2"" of type '" "PEER::cPhenoNode *""'"); 
  }
  arg2 = reinterpret_cast< PEER::cPhenoNode * >(argp2);
  if (arg1) (arg1)->pheno = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_pheno_get ( SEXP self)
{
  PEER::cPhenoNode *result = 0 ;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_pheno_get" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (PEER::cPhenoNode *) ((arg1)->pheno);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PEER__cPhenoNode, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VBFA ( )
{
  PEER::cVBFA *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (PEER::cVBFA *)new PEER::cVBFA();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PEER__cVBFA, R_SWIG_OWNER |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_VBFA ( SEXP self)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VBFA" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_getNj ( SEXP self, SEXP s_swig_copy)
{
  int result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_getNj" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (int)(arg1)->getNj();
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_getNp ( SEXP self, SEXP s_swig_copy)
{
  int result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_getNp" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (int)(arg1)->getNp();
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_getNk ( SEXP self, SEXP s_swig_copy)
{
  int result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_getNk" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (int)(arg1)->getNk();
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_getNc ( SEXP self, SEXP s_swig_copy)
{
  int result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_getNc" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (int)(arg1)->getNc();
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_getNmax_iterations ( SEXP self, SEXP s_swig_copy)
{
  int result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_getNmax_iterations" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (int)(arg1)->getNmax_iterations();
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_getTolerance ( SEXP self, SEXP s_swig_copy)
{
  double result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_getTolerance" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (double)(arg1)->getTolerance();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_getVarTolerance ( SEXP self, SEXP s_swig_copy)
{
  double result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_getVarTolerance" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (double)(arg1)->getVarTolerance();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_getAdd_mean ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_getAdd_mean" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (bool)(arg1)->getAdd_mean();
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_getPriorEpsA ( SEXP self, SEXP s_swig_copy)
{
  double result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_getPriorEpsA" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (double)(arg1)->getPriorEpsA();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_getPriorEpsB ( SEXP self, SEXP s_swig_copy)
{
  double result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_getPriorEpsB" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (double)(arg1)->getPriorEpsB();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_getPriorAlphaA ( SEXP self, SEXP s_swig_copy)
{
  double result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_getPriorAlphaA" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (double)(arg1)->getPriorAlphaA();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_getPriorAlphaB ( SEXP self, SEXP s_swig_copy)
{
  double result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_getPriorAlphaB" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (double)(arg1)->getPriorAlphaB();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_setNk ( SEXP self, SEXP Nk)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_setNk" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  arg2 = static_cast< int >(INTEGER(Nk)[0]);
  (arg1)->setNk(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_setAdd_mean ( SEXP self, SEXP add_mean)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_setAdd_mean" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  arg2 = LOGICAL(add_mean)[0] ? true : false;
  (arg1)->setAdd_mean(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_setNmax_iterations ( SEXP self, SEXP Nmax_iterations)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_setNmax_iterations" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  arg2 = static_cast< int >(INTEGER(Nmax_iterations)[0]);
  (arg1)->setNmax_iterations(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_setTolerance ( SEXP self, SEXP tolerance)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_setTolerance" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  arg2 = static_cast< double >(REAL(tolerance)[0]);
  (arg1)->setTolerance(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_setVarTolerance ( SEXP self, SEXP tolerance)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_setVarTolerance" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  arg2 = static_cast< double >(REAL(tolerance)[0]);
  (arg1)->setVarTolerance(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_setPriorAlphaA ( SEXP self, SEXP pa)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_setPriorAlphaA" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  arg2 = static_cast< double >(REAL(pa)[0]);
  (arg1)->setPriorAlphaA(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_setPriorAlphaB ( SEXP self, SEXP pb)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_setPriorAlphaB" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  arg2 = static_cast< double >(REAL(pb)[0]);
  (arg1)->setPriorAlphaB(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_setPriorEpsA ( SEXP self, SEXP pa)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_setPriorEpsA" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  arg2 = static_cast< double >(REAL(pa)[0]);
  (arg1)->setPriorEpsA(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_setPriorEpsB ( SEXP self, SEXP pb)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_setPriorEpsB" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  arg2 = static_cast< double >(REAL(pb)[0]);
  (arg1)->setPriorEpsB(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_setPriorAlpha ( SEXP self, SEXP pa, SEXP pb)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_setPriorAlpha" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  arg2 = static_cast< double >(REAL(pa)[0]);
  arg3 = static_cast< double >(REAL(pb)[0]);
  (arg1)->setPriorAlpha(arg2,arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_setPriorEps ( SEXP self, SEXP pa, SEXP pb)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_setPriorEps" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  arg2 = static_cast< double >(REAL(pa)[0]);
  arg3 = static_cast< double >(REAL(pb)[0]);
  (arg1)->setPriorEps(arg2,arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_init_net ( SEXP self)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_init_net" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  (arg1)->init_net();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_calcBound ( SEXP self, SEXP s_swig_copy)
{
  double result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_calcBound" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (double)(arg1)->calcBound();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_logprob ( SEXP self, SEXP s_swig_copy)
{
  double result;
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_logprob" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  result = (double)(arg1)->logprob();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_update ( SEXP self)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_update" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  (arg1)->update();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_setPhenoMean ( SEXP self, SEXP matrix)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  float64_t *arg2 = (float64_t *) 0 ;
  int32_t arg3 ;
  int32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_setPhenoMean" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  {
    if( TYPEOF(matrix) != REALSXP)
    {
      /*SG_ERROR("Expected Double Matrix as argument %d\n", m_rhs_counter);*/
      return Rf_ScalarLogical(NA_LOGICAL);
    }
    
    arg2 = (float64_t*) REAL(matrix);
    arg3 = Rf_nrows(matrix);
    arg4 = Rf_ncols(matrix);
  }
  (arg1)->setPhenoMean(arg2,arg3,arg4);
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_setPhenoVar ( SEXP self, SEXP matrix)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  float64_t *arg2 = (float64_t *) 0 ;
  int32_t arg3 ;
  int32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_setPhenoVar" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  {
    if( TYPEOF(matrix) != REALSXP)
    {
      /*SG_ERROR("Expected Double Matrix as argument %d\n", m_rhs_counter);*/
      return Rf_ScalarLogical(NA_LOGICAL);
    }
    
    arg2 = (float64_t*) REAL(matrix);
    arg3 = Rf_nrows(matrix);
    arg4 = Rf_ncols(matrix);
  }
  (arg1)->setPhenoVar(arg2,arg3,arg4);
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_setCovariates ( SEXP self, SEXP matrix)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  float64_t *arg2 = (float64_t *) 0 ;
  int32_t arg3 ;
  int32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_setCovariates" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  {
    if( TYPEOF(matrix) != REALSXP)
    {
      /*SG_ERROR("Expected Double Matrix as argument %d\n", m_rhs_counter);*/
      return Rf_ScalarLogical(NA_LOGICAL);
    }
    
    arg2 = (float64_t*) REAL(matrix);
    arg3 = Rf_nrows(matrix);
    arg4 = Rf_ncols(matrix);
  }
  (arg1)->setCovariates(arg2,arg3,arg4);
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_getPhenoMean ( SEXP self)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  float64_t **arg2 = (float64_t **) 0 ;
  int32_t *arg3 = (int32_t *) 0 ;
  int32_t *arg4 = (int32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  {
    arg2 = (float64_t**) malloc(sizeof(float64_t*));
    arg3 = (int32_t*) malloc(sizeof(int32_t));
    arg4 = (int32_t*) malloc(sizeof(int32_t));
  }
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_getPhenoMean" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  (arg1)->getPhenoMean(arg2,arg3,arg4);
  r_ans = R_NilValue;
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,0));
  r_nprotect += 1;
  r_ans = R_OutputValues;
  {
    float64_t* matrix = *arg2;
    int32_t num_feat = *arg3;
    int32_t num_vec = *arg4;
    
    Rf_protect( r_ans = Rf_allocMatrix(REALSXP, num_feat, num_vec) );
    
    for (int32_t i=0; i<num_vec; i++)
    {
      for (int32_t j=0; j<num_feat; j++)
      REAL(r_ans)[i*num_feat+j]=(double) matrix[i*num_feat+j];
    }
    Rf_unprotect(1);
    free(*arg2); free(arg2); free(arg3); free(arg4);
  }
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_getPhenoVar ( SEXP self)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  float64_t **arg2 = (float64_t **) 0 ;
  int32_t *arg3 = (int32_t *) 0 ;
  int32_t *arg4 = (int32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  {
    arg2 = (float64_t**) malloc(sizeof(float64_t*));
    arg3 = (int32_t*) malloc(sizeof(int32_t));
    arg4 = (int32_t*) malloc(sizeof(int32_t));
  }
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_getPhenoVar" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  (arg1)->getPhenoVar(arg2,arg3,arg4);
  r_ans = R_NilValue;
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,0));
  r_nprotect += 1;
  r_ans = R_OutputValues;
  {
    float64_t* matrix = *arg2;
    int32_t num_feat = *arg3;
    int32_t num_vec = *arg4;
    
    Rf_protect( r_ans = Rf_allocMatrix(REALSXP, num_feat, num_vec) );
    
    for (int32_t i=0; i<num_vec; i++)
    {
      for (int32_t j=0; j<num_feat; j++)
      REAL(r_ans)[i*num_feat+j]=(double) matrix[i*num_feat+j];
    }
    Rf_unprotect(1);
    free(*arg2); free(arg2); free(arg3); free(arg4);
  }
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_getCovariates ( SEXP self)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  float64_t **arg2 = (float64_t **) 0 ;
  int32_t *arg3 = (int32_t *) 0 ;
  int32_t *arg4 = (int32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  {
    arg2 = (float64_t**) malloc(sizeof(float64_t*));
    arg3 = (int32_t*) malloc(sizeof(int32_t));
    arg4 = (int32_t*) malloc(sizeof(int32_t));
  }
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_getCovariates" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  (arg1)->getCovariates(arg2,arg3,arg4);
  r_ans = R_NilValue;
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,0));
  r_nprotect += 1;
  r_ans = R_OutputValues;
  {
    float64_t* matrix = *arg2;
    int32_t num_feat = *arg3;
    int32_t num_vec = *arg4;
    
    Rf_protect( r_ans = Rf_allocMatrix(REALSXP, num_feat, num_vec) );
    
    for (int32_t i=0; i<num_vec; i++)
    {
      for (int32_t j=0; j<num_feat; j++)
      REAL(r_ans)[i*num_feat+j]=(double) matrix[i*num_feat+j];
    }
    Rf_unprotect(1);
    free(*arg2); free(arg2); free(arg3); free(arg4);
  }
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_getX ( SEXP self)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  float64_t **arg2 = (float64_t **) 0 ;
  int32_t *arg3 = (int32_t *) 0 ;
  int32_t *arg4 = (int32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  {
    arg2 = (float64_t**) malloc(sizeof(float64_t*));
    arg3 = (int32_t*) malloc(sizeof(int32_t));
    arg4 = (int32_t*) malloc(sizeof(int32_t));
  }
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_getX" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  (arg1)->getX(arg2,arg3,arg4);
  r_ans = R_NilValue;
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,0));
  r_nprotect += 1;
  r_ans = R_OutputValues;
  {
    float64_t* matrix = *arg2;
    int32_t num_feat = *arg3;
    int32_t num_vec = *arg4;
    
    Rf_protect( r_ans = Rf_allocMatrix(REALSXP, num_feat, num_vec) );
    
    for (int32_t i=0; i<num_vec; i++)
    {
      for (int32_t j=0; j<num_feat; j++)
      REAL(r_ans)[i*num_feat+j]=(double) matrix[i*num_feat+j];
    }
    Rf_unprotect(1);
    free(*arg2); free(arg2); free(arg3); free(arg4);
  }
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_getW ( SEXP self)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  float64_t **arg2 = (float64_t **) 0 ;
  int32_t *arg3 = (int32_t *) 0 ;
  int32_t *arg4 = (int32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  {
    arg2 = (float64_t**) malloc(sizeof(float64_t*));
    arg3 = (int32_t*) malloc(sizeof(int32_t));
    arg4 = (int32_t*) malloc(sizeof(int32_t));
  }
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_getW" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  (arg1)->getW(arg2,arg3,arg4);
  r_ans = R_NilValue;
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,0));
  r_nprotect += 1;
  r_ans = R_OutputValues;
  {
    float64_t* matrix = *arg2;
    int32_t num_feat = *arg3;
    int32_t num_vec = *arg4;
    
    Rf_protect( r_ans = Rf_allocMatrix(REALSXP, num_feat, num_vec) );
    
    for (int32_t i=0; i<num_vec; i++)
    {
      for (int32_t j=0; j<num_feat; j++)
      REAL(r_ans)[i*num_feat+j]=(double) matrix[i*num_feat+j];
    }
    Rf_unprotect(1);
    free(*arg2); free(arg2); free(arg3); free(arg4);
  }
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_getEps ( SEXP self)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  float64_t **arg2 = (float64_t **) 0 ;
  int32_t *arg3 = (int32_t *) 0 ;
  int32_t *arg4 = (int32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  {
    arg2 = (float64_t**) malloc(sizeof(float64_t*));
    arg3 = (int32_t*) malloc(sizeof(int32_t));
    arg4 = (int32_t*) malloc(sizeof(int32_t));
  }
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_getEps" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  (arg1)->getEps(arg2,arg3,arg4);
  r_ans = R_NilValue;
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,0));
  r_nprotect += 1;
  r_ans = R_OutputValues;
  {
    float64_t* matrix = *arg2;
    int32_t num_feat = *arg3;
    int32_t num_vec = *arg4;
    
    Rf_protect( r_ans = Rf_allocMatrix(REALSXP, num_feat, num_vec) );
    
    for (int32_t i=0; i<num_vec; i++)
    {
      for (int32_t j=0; j<num_feat; j++)
      REAL(r_ans)[i*num_feat+j]=(double) matrix[i*num_feat+j];
    }
    Rf_unprotect(1);
    free(*arg2); free(arg2); free(arg3); free(arg4);
  }
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_getAlpha ( SEXP self)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  float64_t **arg2 = (float64_t **) 0 ;
  int32_t *arg3 = (int32_t *) 0 ;
  int32_t *arg4 = (int32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  {
    arg2 = (float64_t**) malloc(sizeof(float64_t*));
    arg3 = (int32_t*) malloc(sizeof(int32_t));
    arg4 = (int32_t*) malloc(sizeof(int32_t));
  }
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_getAlpha" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  (arg1)->getAlpha(arg2,arg3,arg4);
  r_ans = R_NilValue;
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,0));
  r_nprotect += 1;
  r_ans = R_OutputValues;
  {
    float64_t* matrix = *arg2;
    int32_t num_feat = *arg3;
    int32_t num_vec = *arg4;
    
    Rf_protect( r_ans = Rf_allocMatrix(REALSXP, num_feat, num_vec) );
    
    for (int32_t i=0; i<num_vec; i++)
    {
      for (int32_t j=0; j<num_feat; j++)
      REAL(r_ans)[i*num_feat+j]=(double) matrix[i*num_feat+j];
    }
    Rf_unprotect(1);
    free(*arg2); free(arg2); free(arg3); free(arg4);
  }
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VBFA_getResiduals ( SEXP self)
{
  PEER::cVBFA *arg1 = (PEER::cVBFA *) 0 ;
  float64_t **arg2 = (float64_t **) 0 ;
  int32_t *arg3 = (int32_t *) 0 ;
  int32_t *arg4 = (int32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  {
    arg2 = (float64_t**) malloc(sizeof(float64_t*));
    arg3 = (int32_t*) malloc(sizeof(int32_t));
    arg4 = (int32_t*) malloc(sizeof(int32_t));
  }
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cVBFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VBFA_getResiduals" "', argument " "1"" of type '" "PEER::cVBFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cVBFA * >(argp1);
  (arg1)->getResiduals(arg2,arg3,arg4);
  r_ans = R_NilValue;
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,0));
  r_nprotect += 1;
  r_ans = R_OutputValues;
  {
    float64_t* matrix = *arg2;
    int32_t num_feat = *arg3;
    int32_t num_vec = *arg4;
    
    Rf_protect( r_ans = Rf_allocMatrix(REALSXP, num_feat, num_vec) );
    
    for (int32_t i=0; i<num_vec; i++)
    {
      for (int32_t j=0; j<num_feat; j++)
      REAL(r_ans)[i*num_feat+j]=(double) matrix[i*num_feat+j];
    }
    Rf_unprotect(1);
    free(*arg2); free(arg2); free(arg3); free(arg4);
  }
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNodeSparse_pi_set ( SEXP self, SEXP s_pi)
{
  PEER::cWNodeSparse *arg1 = (PEER::cWNodeSparse *) 0 ;
  PMatrix arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNodeSparse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNodeSparse_pi_set" "', argument " "1"" of type '" "PEER::cWNodeSparse *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNodeSparse * >(argp1);
  {
    res2 = SWIG_R_ConvertPtr(s_pi, &argp2, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cWNodeSparse_pi_set" "', argument " "2"" of type '" "PMatrix""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cWNodeSparse_pi_set" "', argument " "2"" of type '" "PMatrix""'");
    } else {
      arg2 = *(reinterpret_cast< PMatrix * >(argp2));
    }
  }
  if (arg1) (arg1)->pi = arg2;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNodeSparse_pi_get ( SEXP self, SEXP s_swig_copy)
{
  PMatrix result;
  PEER::cWNodeSparse *arg1 = (PEER::cWNodeSparse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNodeSparse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNodeSparse_pi_get" "', argument " "1"" of type '" "PEER::cWNodeSparse *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNodeSparse * >(argp1);
  result =  ((arg1)->pi);
  r_ans = SWIG_R_NewPointerObj((new PMatrix(static_cast< const PMatrix& >(result))), SWIGTYPE_p_PMatrix, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNodeSparse_lpi_set ( SEXP self, SEXP s_lpi)
{
  PEER::cWNodeSparse *arg1 = (PEER::cWNodeSparse *) 0 ;
  PMatrix arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNodeSparse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNodeSparse_lpi_set" "', argument " "1"" of type '" "PEER::cWNodeSparse *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNodeSparse * >(argp1);
  {
    res2 = SWIG_R_ConvertPtr(s_lpi, &argp2, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cWNodeSparse_lpi_set" "', argument " "2"" of type '" "PMatrix""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cWNodeSparse_lpi_set" "', argument " "2"" of type '" "PMatrix""'");
    } else {
      arg2 = *(reinterpret_cast< PMatrix * >(argp2));
    }
  }
  if (arg1) (arg1)->lpi = arg2;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNodeSparse_lpi_get ( SEXP self, SEXP s_swig_copy)
{
  PMatrix result;
  PEER::cWNodeSparse *arg1 = (PEER::cWNodeSparse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNodeSparse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNodeSparse_lpi_get" "', argument " "1"" of type '" "PEER::cWNodeSparse *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNodeSparse * >(argp1);
  result =  ((arg1)->lpi);
  r_ans = SWIG_R_NewPointerObj((new PMatrix(static_cast< const PMatrix& >(result))), SWIGTYPE_p_PMatrix, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNodeSparse_lpi_off_set ( SEXP self, SEXP s_lpi_off)
{
  PEER::cWNodeSparse *arg1 = (PEER::cWNodeSparse *) 0 ;
  PMatrix arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNodeSparse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNodeSparse_lpi_off_set" "', argument " "1"" of type '" "PEER::cWNodeSparse *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNodeSparse * >(argp1);
  {
    res2 = SWIG_R_ConvertPtr(s_lpi_off, &argp2, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cWNodeSparse_lpi_off_set" "', argument " "2"" of type '" "PMatrix""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cWNodeSparse_lpi_off_set" "', argument " "2"" of type '" "PMatrix""'");
    } else {
      arg2 = *(reinterpret_cast< PMatrix * >(argp2));
    }
  }
  if (arg1) (arg1)->lpi_off = arg2;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNodeSparse_lpi_off_get ( SEXP self, SEXP s_swig_copy)
{
  PMatrix result;
  PEER::cWNodeSparse *arg1 = (PEER::cWNodeSparse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNodeSparse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNodeSparse_lpi_off_get" "', argument " "1"" of type '" "PEER::cWNodeSparse *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNodeSparse * >(argp1);
  result =  ((arg1)->lpi_off);
  r_ans = SWIG_R_NewPointerObj((new PMatrix(static_cast< const PMatrix& >(result))), SWIGTYPE_p_PMatrix, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNodeSparse_C_set ( SEXP self, SEXP s_C)
{
  PEER::cWNodeSparse *arg1 = (PEER::cWNodeSparse *) 0 ;
  PMatrix arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNodeSparse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNodeSparse_C_set" "', argument " "1"" of type '" "PEER::cWNodeSparse *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNodeSparse * >(argp1);
  {
    res2 = SWIG_R_ConvertPtr(s_C, &argp2, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cWNodeSparse_C_set" "', argument " "2"" of type '" "PMatrix""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cWNodeSparse_C_set" "', argument " "2"" of type '" "PMatrix""'");
    } else {
      arg2 = *(reinterpret_cast< PMatrix * >(argp2));
    }
  }
  if (arg1) (arg1)->C = arg2;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNodeSparse_C_get ( SEXP self, SEXP s_swig_copy)
{
  PMatrix result;
  PEER::cWNodeSparse *arg1 = (PEER::cWNodeSparse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNodeSparse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNodeSparse_C_get" "', argument " "1"" of type '" "PEER::cWNodeSparse *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNodeSparse * >(argp1);
  result =  ((arg1)->C);
  r_ans = SWIG_R_NewPointerObj((new PMatrix(static_cast< const PMatrix& >(result))), SWIGTYPE_p_PMatrix, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNodeSparse_Coff_set ( SEXP self, SEXP s_Coff)
{
  PEER::cWNodeSparse *arg1 = (PEER::cWNodeSparse *) 0 ;
  PMatrix arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNodeSparse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNodeSparse_Coff_set" "', argument " "1"" of type '" "PEER::cWNodeSparse *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNodeSparse * >(argp1);
  {
    res2 = SWIG_R_ConvertPtr(s_Coff, &argp2, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cWNodeSparse_Coff_set" "', argument " "2"" of type '" "PMatrix""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cWNodeSparse_Coff_set" "', argument " "2"" of type '" "PMatrix""'");
    } else {
      arg2 = *(reinterpret_cast< PMatrix * >(argp2));
    }
  }
  if (arg1) (arg1)->Coff = arg2;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNodeSparse_Coff_get ( SEXP self, SEXP s_swig_copy)
{
  PMatrix result;
  PEER::cWNodeSparse *arg1 = (PEER::cWNodeSparse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNodeSparse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNodeSparse_Coff_get" "', argument " "1"" of type '" "PEER::cWNodeSparse *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNodeSparse * >(argp1);
  result =  ((arg1)->Coff);
  r_ans = SWIG_R_NewPointerObj((new PMatrix(static_cast< const PMatrix& >(result))), SWIGTYPE_p_PMatrix, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNodeSparse_CovPriorDiag_set ( SEXP self, SEXP s_CovPriorDiag)
{
  PEER::cWNodeSparse *arg1 = (PEER::cWNodeSparse *) 0 ;
  PMatrix arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNodeSparse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNodeSparse_CovPriorDiag_set" "', argument " "1"" of type '" "PEER::cWNodeSparse *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNodeSparse * >(argp1);
  {
    res2 = SWIG_R_ConvertPtr(s_CovPriorDiag, &argp2, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cWNodeSparse_CovPriorDiag_set" "', argument " "2"" of type '" "PMatrix""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cWNodeSparse_CovPriorDiag_set" "', argument " "2"" of type '" "PMatrix""'");
    } else {
      arg2 = *(reinterpret_cast< PMatrix * >(argp2));
    }
  }
  if (arg1) (arg1)->CovPriorDiag = arg2;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNodeSparse_CovPriorDiag_get ( SEXP self, SEXP s_swig_copy)
{
  PMatrix result;
  PEER::cWNodeSparse *arg1 = (PEER::cWNodeSparse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNodeSparse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNodeSparse_CovPriorDiag_get" "', argument " "1"" of type '" "PEER::cWNodeSparse *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNodeSparse * >(argp1);
  result =  ((arg1)->CovPriorDiag);
  r_ans = SWIG_R_NewPointerObj((new PMatrix(static_cast< const PMatrix& >(result))), SWIGTYPE_p_PMatrix, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNodeSparse_tauOn_set ( SEXP self, SEXP s_tauOn)
{
  PEER::cWNodeSparse *arg1 = (PEER::cWNodeSparse *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNodeSparse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNodeSparse_tauOn_set" "', argument " "1"" of type '" "PEER::cWNodeSparse *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNodeSparse * >(argp1);
  arg2 = static_cast< double >(REAL(s_tauOn)[0]);
  if (arg1) (arg1)->tauOn = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNodeSparse_tauOn_get ( SEXP self, SEXP s_swig_copy)
{
  double result;
  PEER::cWNodeSparse *arg1 = (PEER::cWNodeSparse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNodeSparse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNodeSparse_tauOn_get" "', argument " "1"" of type '" "PEER::cWNodeSparse *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNodeSparse * >(argp1);
  result = (double) ((arg1)->tauOn);
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNodeSparse_tauOff_set ( SEXP self, SEXP s_tauOff)
{
  PEER::cWNodeSparse *arg1 = (PEER::cWNodeSparse *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNodeSparse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNodeSparse_tauOff_set" "', argument " "1"" of type '" "PEER::cWNodeSparse *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNodeSparse * >(argp1);
  arg2 = static_cast< double >(REAL(s_tauOff)[0]);
  if (arg1) (arg1)->tauOff = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNodeSparse_tauOff_get ( SEXP self, SEXP s_swig_copy)
{
  double result;
  PEER::cWNodeSparse *arg1 = (PEER::cWNodeSparse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNodeSparse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNodeSparse_tauOff_get" "', argument " "1"" of type '" "PEER::cWNodeSparse *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNodeSparse * >(argp1);
  result = (double) ((arg1)->tauOff);
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_cWNodeSparse__SWIG_0 ( )
{
  PEER::cWNodeSparse *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (PEER::cWNodeSparse *)new PEER::cWNodeSparse();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PEER__cWNodeSparse, R_SWIG_OWNER |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_cWNodeSparse__SWIG_1 ( SEXP E1, SEXP pi, SEXP net)
{
  PEER::cWNodeSparse *result = 0 ;
  PMatrix arg1 ;
  PMatrix arg2 ;
  cBayesNet *arg3 = (cBayesNet *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    res1 = SWIG_R_ConvertPtr(E1, &argp1, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_cWNodeSparse" "', argument " "1"" of type '" "PMatrix""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cWNodeSparse" "', argument " "1"" of type '" "PMatrix""'");
    } else {
      arg1 = *(reinterpret_cast< PMatrix * >(argp1));
    }
  }
  {
    res2 = SWIG_R_ConvertPtr(pi, &argp2, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_cWNodeSparse" "', argument " "2"" of type '" "PMatrix""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cWNodeSparse" "', argument " "2"" of type '" "PMatrix""'");
    } else {
      arg2 = *(reinterpret_cast< PMatrix * >(argp2));
    }
  }
  res3 = SWIG_R_ConvertPtr(net, &argp3, SWIGTYPE_p_cBayesNet, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_cWNodeSparse" "', argument " "3"" of type '" "cBayesNet *""'"); 
  }
  arg3 = reinterpret_cast< cBayesNet * >(argp3);
  result = (PEER::cWNodeSparse *)new PEER::cWNodeSparse(arg1,arg2,arg3);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PEER__cWNodeSparse, R_SWIG_OWNER |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cWNodeSparse_update ( SEXP self, SEXP net)
{
  PEER::cWNodeSparse *arg1 = (PEER::cWNodeSparse *) 0 ;
  cBayesNet *arg2 = (cBayesNet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNodeSparse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cWNodeSparse_update" "', argument " "1"" of type '" "PEER::cWNodeSparse *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNodeSparse * >(argp1);
  res2 = SWIG_R_ConvertPtr(net, &argp2, SWIGTYPE_p_cBayesNet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cWNodeSparse_update" "', argument " "2"" of type '" "cBayesNet *""'"); 
  }
  arg2 = reinterpret_cast< cBayesNet * >(argp2);
  (arg1)->update(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_cWNodeSparse ( SEXP self)
{
  PEER::cWNodeSparse *arg1 = (PEER::cWNodeSparse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cWNodeSparse, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cWNodeSparse" "', argument " "1"" of type '" "PEER::cWNodeSparse *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cWNodeSparse * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_cEpsNodeSparse ( SEXP dim, SEXP pa, SEXP pb, SEXP E1)
{
  PEER::cEpsNodeSparse *result = 0 ;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  PMatrix arg4 ;
  void *argp4 ;
  int res4 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(dim)[0]);
  arg2 = static_cast< float >(REAL(pa)[0]);
  arg3 = static_cast< float >(REAL(pb)[0]);
  {
    res4 = SWIG_R_ConvertPtr(E1, &argp4, SWIGTYPE_p_PMatrix,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_cEpsNodeSparse" "', argument " "4"" of type '" "PMatrix""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cEpsNodeSparse" "', argument " "4"" of type '" "PMatrix""'");
    } else {
      arg4 = *(reinterpret_cast< PMatrix * >(argp4));
    }
  }
  result = (PEER::cEpsNodeSparse *)new PEER::cEpsNodeSparse(arg1,arg2,arg3,arg4);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PEER__cEpsNodeSparse, R_SWIG_OWNER |  0 );
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cEpsNodeSparse_update ( SEXP self, SEXP net)
{
  PEER::cEpsNodeSparse *arg1 = (PEER::cEpsNodeSparse *) 0 ;
  cBayesNet *arg2 = (cBayesNet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cEpsNodeSparse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cEpsNodeSparse_update" "', argument " "1"" of type '" "PEER::cEpsNodeSparse *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cEpsNodeSparse * >(argp1);
  res2 = SWIG_R_ConvertPtr(net, &argp2, SWIGTYPE_p_cBayesNet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cEpsNodeSparse_update" "', argument " "2"" of type '" "cBayesNet *""'"); 
  }
  arg2 = reinterpret_cast< cBayesNet * >(argp2);
  (arg1)->update(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_cEpsNodeSparse ( SEXP self)
{
  PEER::cEpsNodeSparse *arg1 = (PEER::cEpsNodeSparse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cEpsNodeSparse, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cEpsNodeSparse" "', argument " "1"" of type '" "PEER::cEpsNodeSparse *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cEpsNodeSparse * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_PEER ( )
{
  PEER::cSPARSEFA *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (PEER::cSPARSEFA *)new PEER::cSPARSEFA();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PEER__cSPARSEFA, R_SWIG_OWNER |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_PEER ( SEXP self)
{
  PEER::cSPARSEFA *arg1 = (PEER::cSPARSEFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cSPARSEFA, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PEER" "', argument " "1"" of type '" "PEER::cSPARSEFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cSPARSEFA * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_PEER_setSigmaOff ( SEXP self, SEXP sigma_off)
{
  PEER::cSPARSEFA *arg1 = (PEER::cSPARSEFA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cSPARSEFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PEER_setSigmaOff" "', argument " "1"" of type '" "PEER::cSPARSEFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cSPARSEFA * >(argp1);
  arg2 = static_cast< double >(REAL(sigma_off)[0]);
  (arg1)->setSigmaOff(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_PEER_getSigmaOff ( SEXP self, SEXP s_swig_copy)
{
  double result;
  PEER::cSPARSEFA *arg1 = (PEER::cSPARSEFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cSPARSEFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PEER_getSigmaOff" "', argument " "1"" of type '" "PEER::cSPARSEFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cSPARSEFA * >(argp1);
  result = (double)(arg1)->getSigmaOff();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_PEER_setSparsityPrior ( SEXP self, SEXP matrix)
{
  PEER::cSPARSEFA *arg1 = (PEER::cSPARSEFA *) 0 ;
  float64_t *arg2 = (float64_t *) 0 ;
  int32_t arg3 ;
  int32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cSPARSEFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PEER_setSparsityPrior" "', argument " "1"" of type '" "PEER::cSPARSEFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cSPARSEFA * >(argp1);
  {
    if( TYPEOF(matrix) != REALSXP)
    {
      /*SG_ERROR("Expected Double Matrix as argument %d\n", m_rhs_counter);*/
      return Rf_ScalarLogical(NA_LOGICAL);
    }
    
    arg2 = (float64_t*) REAL(matrix);
    arg3 = Rf_nrows(matrix);
    arg4 = Rf_ncols(matrix);
  }
  (arg1)->setSparsityPrior(arg2,arg3,arg4);
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_PEER_getSparsityPrior ( SEXP self)
{
  PEER::cSPARSEFA *arg1 = (PEER::cSPARSEFA *) 0 ;
  float64_t **arg2 = (float64_t **) 0 ;
  int32_t *arg3 = (int32_t *) 0 ;
  int32_t *arg4 = (int32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  {
    arg2 = (float64_t**) malloc(sizeof(float64_t*));
    arg3 = (int32_t*) malloc(sizeof(int32_t));
    arg4 = (int32_t*) malloc(sizeof(int32_t));
  }
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cSPARSEFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PEER_getSparsityPrior" "', argument " "1"" of type '" "PEER::cSPARSEFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cSPARSEFA * >(argp1);
  (arg1)->getSparsityPrior(arg2,arg3,arg4);
  r_ans = R_NilValue;
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,0));
  r_nprotect += 1;
  r_ans = R_OutputValues;
  {
    float64_t* matrix = *arg2;
    int32_t num_feat = *arg3;
    int32_t num_vec = *arg4;
    
    Rf_protect( r_ans = Rf_allocMatrix(REALSXP, num_feat, num_vec) );
    
    for (int32_t i=0; i<num_vec; i++)
    {
      for (int32_t j=0; j<num_feat; j++)
      REAL(r_ans)[i*num_feat+j]=(double) matrix[i*num_feat+j];
    }
    Rf_unprotect(1);
    free(*arg2); free(arg2); free(arg3); free(arg4);
  }
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_PEER_getZ ( SEXP self)
{
  PEER::cSPARSEFA *arg1 = (PEER::cSPARSEFA *) 0 ;
  float64_t **arg2 = (float64_t **) 0 ;
  int32_t *arg3 = (int32_t *) 0 ;
  int32_t *arg4 = (int32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  {
    arg2 = (float64_t**) malloc(sizeof(float64_t*));
    arg3 = (int32_t*) malloc(sizeof(int32_t));
    arg4 = (int32_t*) malloc(sizeof(int32_t));
  }
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cSPARSEFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PEER_getZ" "', argument " "1"" of type '" "PEER::cSPARSEFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cSPARSEFA * >(argp1);
  (arg1)->getZ(arg2,arg3,arg4);
  r_ans = R_NilValue;
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,0));
  r_nprotect += 1;
  r_ans = R_OutputValues;
  {
    float64_t* matrix = *arg2;
    int32_t num_feat = *arg3;
    int32_t num_vec = *arg4;
    
    Rf_protect( r_ans = Rf_allocMatrix(REALSXP, num_feat, num_vec) );
    
    for (int32_t i=0; i<num_vec; i++)
    {
      for (int32_t j=0; j<num_feat; j++)
      REAL(r_ans)[i*num_feat+j]=(double) matrix[i*num_feat+j];
    }
    Rf_unprotect(1);
    free(*arg2); free(arg2); free(arg3); free(arg4);
  }
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_PEER_calcBound ( SEXP self, SEXP s_swig_copy)
{
  double result;
  PEER::cSPARSEFA *arg1 = (PEER::cSPARSEFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cSPARSEFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PEER_calcBound" "', argument " "1"" of type '" "PEER::cSPARSEFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cSPARSEFA * >(argp1);
  result = (double)(arg1)->calcBound();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_PEER_logprob ( SEXP self, SEXP s_swig_copy)
{
  double result;
  PEER::cSPARSEFA *arg1 = (PEER::cSPARSEFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cSPARSEFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PEER_logprob" "', argument " "1"" of type '" "PEER::cSPARSEFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cSPARSEFA * >(argp1);
  result = (double)(arg1)->logprob();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_PEER_init_net ( SEXP self)
{
  PEER::cSPARSEFA *arg1 = (PEER::cSPARSEFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cSPARSEFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PEER_init_net" "', argument " "1"" of type '" "PEER::cSPARSEFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cSPARSEFA * >(argp1);
  (arg1)->init_net();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_PEER_init_net_sparse ( SEXP self)
{
  PEER::cSPARSEFA *arg1 = (PEER::cSPARSEFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cSPARSEFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PEER_init_net_sparse" "', argument " "1"" of type '" "PEER::cSPARSEFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cSPARSEFA * >(argp1);
  (arg1)->init_net_sparse();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_PEER_update ( SEXP self)
{
  PEER::cSPARSEFA *arg1 = (PEER::cSPARSEFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PEER__cSPARSEFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PEER_update" "', argument " "1"" of type '" "PEER::cSPARSEFA *""'"); 
  }
  arg1 = reinterpret_cast< PEER::cSPARSEFA * >(argp1);
  (arg1)->update();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_PEER__cSPARSEFATo_p_cBayesNet(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cBayesNet *) (PEER::cVBFA *) ((PEER::cSPARSEFA *) x));
}
static void *_p_PEER__cVBFATo_p_cBayesNet(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cBayesNet *)  ((PEER::cVBFA *) x));
}
static void *_p_PEER__cWNodeSparseTo_p_PEER__cWNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PEER::cWNode *)  ((PEER::cWNodeSparse *) x));
}
static void *_p_PEER__cSPARSEFATo_p_PEER__cVBFA(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PEER::cVBFA *)  ((PEER::cSPARSEFA *) x));
}
static void *_p_PEER__cEpsNodeSparseTo_p_PEER__cEpsNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PEER::cEpsNode *)  ((PEER::cEpsNodeSparse *) x));
}
static swig_type_info _swigt__p_PEER__cAlphaNode = {"_p_PEER__cAlphaNode", "PEER::cAlphaNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PEER__cEpsNode = {"_p_PEER__cEpsNode", "PEER::cEpsNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PEER__cEpsNodeSparse = {"_p_PEER__cEpsNodeSparse", "PEER::cEpsNodeSparse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PEER__cPhenoNode = {"_p_PEER__cPhenoNode", "PEER::cPhenoNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PEER__cSPARSEFA = {"_p_PEER__cSPARSEFA", "PEER::cSPARSEFA *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PEER__cVBFA = {"_p_PEER__cVBFA", "PEER::cVBFA *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PEER__cWNode = {"_p_PEER__cWNode", "PEER::cWNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PEER__cWNodeSparse = {"_p_PEER__cWNodeSparse", "PEER::cWNodeSparse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PEER__cXNode = {"_p_PEER__cXNode", "PEER::cXNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PMatrix = {"_p_PMatrix", "PMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cBayesNet = {"_p_cBayesNet", "cBayesNet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int32_t = {"_p_int32_t", "int32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_intialisation_types = {"_p_intialisation_types", "intialisation_types *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_float64_t = {"_p_p_float64_t", "float64_t **", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_PEER__cAlphaNode,
  &_swigt__p_PEER__cEpsNode,
  &_swigt__p_PEER__cEpsNodeSparse,
  &_swigt__p_PEER__cPhenoNode,
  &_swigt__p_PEER__cSPARSEFA,
  &_swigt__p_PEER__cVBFA,
  &_swigt__p_PEER__cWNode,
  &_swigt__p_PEER__cWNodeSparse,
  &_swigt__p_PEER__cXNode,
  &_swigt__p_PMatrix,
  &_swigt__p_cBayesNet,
  &_swigt__p_char,
  &_swigt__p_int32_t,
  &_swigt__p_intialisation_types,
  &_swigt__p_p_float64_t,
};

static swig_cast_info _swigc__p_PEER__cAlphaNode[] = {  {&_swigt__p_PEER__cAlphaNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PEER__cEpsNode[] = {  {&_swigt__p_PEER__cEpsNodeSparse, _p_PEER__cEpsNodeSparseTo_p_PEER__cEpsNode, 0, 0},  {&_swigt__p_PEER__cEpsNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PEER__cEpsNodeSparse[] = {  {&_swigt__p_PEER__cEpsNodeSparse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PEER__cPhenoNode[] = {  {&_swigt__p_PEER__cPhenoNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PEER__cSPARSEFA[] = {  {&_swigt__p_PEER__cSPARSEFA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PEER__cVBFA[] = {  {&_swigt__p_PEER__cSPARSEFA, _p_PEER__cSPARSEFATo_p_PEER__cVBFA, 0, 0},  {&_swigt__p_PEER__cVBFA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PEER__cWNode[] = {  {&_swigt__p_PEER__cWNode, 0, 0, 0},  {&_swigt__p_PEER__cWNodeSparse, _p_PEER__cWNodeSparseTo_p_PEER__cWNode, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PEER__cWNodeSparse[] = {  {&_swigt__p_PEER__cWNodeSparse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PEER__cXNode[] = {  {&_swigt__p_PEER__cXNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PMatrix[] = {  {&_swigt__p_PMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cBayesNet[] = {  {&_swigt__p_PEER__cSPARSEFA, _p_PEER__cSPARSEFATo_p_cBayesNet, 0, 0},  {&_swigt__p_PEER__cVBFA, _p_PEER__cVBFATo_p_cBayesNet, 0, 0},  {&_swigt__p_cBayesNet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int32_t[] = {  {&_swigt__p_int32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_intialisation_types[] = {  {&_swigt__p_intialisation_types, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_float64_t[] = {  {&_swigt__p_p_float64_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_PEER__cAlphaNode,
  _swigc__p_PEER__cEpsNode,
  _swigc__p_PEER__cEpsNodeSparse,
  _swigc__p_PEER__cPhenoNode,
  _swigc__p_PEER__cSPARSEFA,
  _swigc__p_PEER__cVBFA,
  _swigc__p_PEER__cWNode,
  _swigc__p_PEER__cWNodeSparse,
  _swigc__p_PEER__cXNode,
  _swigc__p_PMatrix,
  _swigc__p_cBayesNet,
  _swigc__p_char,
  _swigc__p_int32_t,
  _swigc__p_intialisation_types,
  _swigc__p_p_float64_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */


/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


SWIGEXPORT void SWIG_init(void) {

}
#ifdef __cplusplus
extern "C" {
#endif

#include <R_ext/Rdynload.h>

#ifdef __cplusplus
}
#endif

SWIGINTERN R_CallMethodDef CallEntries[] = {
   {"R_swig_cWNode_lndetcovS_get", (DL_FUNC) &R_swig_cWNode_lndetcovS_get, 2},
   {"R_swig_cWNodeSparse_CovPriorDiag_get", (DL_FUNC) &R_swig_cWNodeSparse_CovPriorDiag_get, 2},
   {"R_swig_VBFA_initialisation_set", (DL_FUNC) &R_swig_VBFA_initialisation_set, 2},
   {"R_swig_VBFA_var_tolerance_get", (DL_FUNC) &R_swig_VBFA_var_tolerance_get, 2},
   {"R_swig_VBFA_tolerance_get", (DL_FUNC) &R_swig_VBFA_tolerance_get, 2},
   {"R_swig_PEER_init_net_sparse", (DL_FUNC) &R_swig_PEER_init_net_sparse, 1},
   {"R_swig_new_VBFA", (DL_FUNC) &R_swig_new_VBFA, 0},
   {"R_swig_cWNodeSparse_Coff_get", (DL_FUNC) &R_swig_cWNodeSparse_Coff_get, 2},
   {"R_swig_cWNodeSparse_lpi_off_get", (DL_FUNC) &R_swig_cWNodeSparse_lpi_off_get, 2},
   {"R_swig_cWNodeSparse_tauOff_get", (DL_FUNC) &R_swig_cWNodeSparse_tauOff_get, 2},
   {"R_swig_VBFA_setPriorAlpha", (DL_FUNC) &R_swig_VBFA_setPriorAlpha, 3},
   {"R_swig_VBFA_Nmax_iterations_get", (DL_FUNC) &R_swig_VBFA_Nmax_iterations_get, 2},
   {"R_swig_cWNodeSparse_pi_get", (DL_FUNC) &R_swig_cWNodeSparse_pi_get, 2},
   {"R_swig_cWNode_entropy", (DL_FUNC) &R_swig_cWNode_entropy, 2},
   {"R_swig_cXNode_entropy", (DL_FUNC) &R_swig_cXNode_entropy, 2},
   {"R_swig_VBFA_Alpha_get", (DL_FUNC) &R_swig_VBFA_Alpha_get, 1},
   {"R_swig_VBFA_setVarTolerance", (DL_FUNC) &R_swig_VBFA_setVarTolerance, 2},
   {"R_swig_VBFA_setTolerance", (DL_FUNC) &R_swig_VBFA_setTolerance, 2},
   {"R_swig_VBFA_getVarTolerance", (DL_FUNC) &R_swig_VBFA_getVarTolerance, 2},
   {"R_swig_VBFA_getTolerance", (DL_FUNC) &R_swig_VBFA_getTolerance, 2},
   {"R_swig_cWNode_XE2S_last_get", (DL_FUNC) &R_swig_cWNode_XE2S_last_get, 2},
   {"R_swig_cWNode_A_last_get", (DL_FUNC) &R_swig_cWNode_A_last_get, 2},
   {"R_swig_cWNode_E_last_get", (DL_FUNC) &R_swig_cWNode_E_last_get, 2},
   {"R_swig_cPhenoNode_E2_set", (DL_FUNC) &R_swig_cPhenoNode_E2_set, 2},
   {"R_swig_cWNodeSparse_tauOn_set", (DL_FUNC) &R_swig_cWNodeSparse_tauOn_set, 2},
   {"R_swig_VERBOSE_get", (DL_FUNC) &R_swig_VERBOSE_get, 1},
   {"R_swig_VBFA_init_net", (DL_FUNC) &R_swig_VBFA_init_net, 1},
   {"R_swig_cPhenoNode_E1_set", (DL_FUNC) &R_swig_cPhenoNode_E1_set, 2},
   {"R_swig_PEER_init_net", (DL_FUNC) &R_swig_PEER_init_net, 1},
   {"R_swig_VBFA_pheno_get", (DL_FUNC) &R_swig_VBFA_pheno_get, 1},
   {"R_swig_delete_cWNodeSparse", (DL_FUNC) &R_swig_delete_cWNodeSparse, 1},
   {"R_swig_new_cEpsNodeSparse", (DL_FUNC) &R_swig_new_cEpsNodeSparse, 4},
   {"R_swig_delete_cEpsNodeSparse", (DL_FUNC) &R_swig_delete_cEpsNodeSparse, 1},
   {"R_swig_cWNodeSparse_C_set", (DL_FUNC) &R_swig_cWNodeSparse_C_set, 2},
   {"R_swig_VBFA_is_initialized_set", (DL_FUNC) &R_swig_VBFA_is_initialized_set, 2},
   {"R_swig_VBFA_setNmax_iterations", (DL_FUNC) &R_swig_VBFA_setNmax_iterations, 2},
   {"R_swig_VBFA_getNmax_iterations", (DL_FUNC) &R_swig_VBFA_getNmax_iterations, 2},
   {"R_swig_VBFA_setNk", (DL_FUNC) &R_swig_VBFA_setNk, 2},
   {"R_swig_VBFA_getPhenoMean", (DL_FUNC) &R_swig_VBFA_getPhenoMean, 1},
   {"R_swig_VBFA_setPhenoMean", (DL_FUNC) &R_swig_VBFA_setPhenoMean, 2},
   {"R_swig_VBFA_pheno_mean_set", (DL_FUNC) &R_swig_VBFA_pheno_mean_set, 2},
   {"R_swig_VBFA_add_mean_set", (DL_FUNC) &R_swig_VBFA_add_mean_set, 2},
   {"R_swig_VBFA_covariate_prec_set", (DL_FUNC) &R_swig_VBFA_covariate_prec_set, 2},
   {"R_swig_cXNode_prior_prec_set", (DL_FUNC) &R_swig_cXNode_prior_prec_set, 2},
   {"R_swig_cWNode_Xprec_set", (DL_FUNC) &R_swig_cWNode_Xprec_set, 2},
   {"R_swig_VBFA_Alpha_pb_get", (DL_FUNC) &R_swig_VBFA_Alpha_pb_get, 2},
   {"R_swig_VBFA_Eps_pb_get", (DL_FUNC) &R_swig_VBFA_Eps_pb_get, 2},
   {"R_swig_VBFA_Alpha_pa_get", (DL_FUNC) &R_swig_VBFA_Alpha_pa_get, 2},
   {"R_swig_VBFA_Eps_pa_get", (DL_FUNC) &R_swig_VBFA_Eps_pa_get, 2},
   {"R_swig_cWNodeSparse_lpi_get", (DL_FUNC) &R_swig_cWNodeSparse_lpi_get, 2},
   {"R_swig_VBFA_Np_get", (DL_FUNC) &R_swig_VBFA_Np_get, 2},
   {"R_swig_VBFA_Eps_set", (DL_FUNC) &R_swig_VBFA_Eps_set, 2},
   {"R_swig_VBFA_pheno_var_set", (DL_FUNC) &R_swig_VBFA_pheno_var_set, 2},
   {"R_swig_cWNode_getE1", (DL_FUNC) &R_swig_cWNode_getE1, 1},
   {"R_swig_cXNode_getE1", (DL_FUNC) &R_swig_cXNode_getE1, 1},
   {"R_swig_cAlphaNode_getE1", (DL_FUNC) &R_swig_cAlphaNode_getE1, 1},
   {"R_swig_cEpsNode_getE1", (DL_FUNC) &R_swig_cEpsNode_getE1, 1},
   {"R_swig_cPhenoNode_getE1", (DL_FUNC) &R_swig_cPhenoNode_getE1, 1},
   {"R_swig_cXNode_E2S_get", (DL_FUNC) &R_swig_cXNode_E2S_get, 2},
   {"R_swig_cWNode_E2S_get", (DL_FUNC) &R_swig_cWNode_E2S_get, 2},
   {"R_swig_VBFA_update", (DL_FUNC) &R_swig_VBFA_update, 1},
   {"R_swig_cWNode_update", (DL_FUNC) &R_swig_cWNode_update, 2},
   {"R_swig_cXNode_update", (DL_FUNC) &R_swig_cXNode_update, 2},
   {"R_swig_cAlphaNode_update", (DL_FUNC) &R_swig_cAlphaNode_update, 2},
   {"R_swig_cEpsNode_update", (DL_FUNC) &R_swig_cEpsNode_update, 2},
   {"R_swig_cWNodeSparse_update", (DL_FUNC) &R_swig_cWNodeSparse_update, 2},
   {"R_swig_cEpsNodeSparse_update", (DL_FUNC) &R_swig_cEpsNodeSparse_update, 2},
   {"R_swig_PEER_update", (DL_FUNC) &R_swig_PEER_update, 1},
   {"R_swig_cWNodeSparse_CovPriorDiag_set", (DL_FUNC) &R_swig_cWNodeSparse_CovPriorDiag_set, 2},
   {"R_swig_VBFA_logprob", (DL_FUNC) &R_swig_VBFA_logprob, 2},
   {"R_swig_cWNode_lndetcovS_set", (DL_FUNC) &R_swig_cWNode_lndetcovS_set, 2},
   {"R_swig_PEER_logprob", (DL_FUNC) &R_swig_PEER_logprob, 2},
   {"R_swig_delete_cEpsNode", (DL_FUNC) &R_swig_delete_cEpsNode, 1},
   {"R_swig_VBFA_var_tolerance_set", (DL_FUNC) &R_swig_VBFA_var_tolerance_set, 2},
   {"R_swig_VBFA_tolerance_set", (DL_FUNC) &R_swig_VBFA_tolerance_set, 2},
   {"R_swig_delete_PEER", (DL_FUNC) &R_swig_delete_PEER, 1},
   {"R_swig_cXNode_prior_offset_get", (DL_FUNC) &R_swig_cXNode_prior_offset_get, 2},
   {"R_swig_VBFA_getNc", (DL_FUNC) &R_swig_VBFA_getNc, 2},
   {"R_swig_VBFA_covs_get", (DL_FUNC) &R_swig_VBFA_covs_get, 2},
   {"R_swig_VBFA_Nk_get", (DL_FUNC) &R_swig_VBFA_Nk_get, 2},
   {"R_swig_VBFA_setPriorEps", (DL_FUNC) &R_swig_VBFA_setPriorEps, 3},
   {"R_swig_VBFA_Nj_get", (DL_FUNC) &R_swig_VBFA_Nj_get, 2},
   {"R_swig_VBFA_getNj", (DL_FUNC) &R_swig_VBFA_getNj, 2},
   {"R_swig_VBFA_X_get", (DL_FUNC) &R_swig_VBFA_X_get, 1},
   {"R_swig_VBFA_getNk", (DL_FUNC) &R_swig_VBFA_getNk, 2},
   {"R_swig_cWNodeSparse_Coff_set", (DL_FUNC) &R_swig_cWNodeSparse_Coff_set, 2},
   {"R_swig_cWNodeSparse_lpi_off_set", (DL_FUNC) &R_swig_cWNodeSparse_lpi_off_set, 2},
   {"R_swig_cWNodeSparse_tauOff_set", (DL_FUNC) &R_swig_cWNodeSparse_tauOff_set, 2},
   {"R_swig_VBFA_W_get", (DL_FUNC) &R_swig_VBFA_W_get, 1},
   {"R_swig_cXNode_cov_get", (DL_FUNC) &R_swig_cXNode_cov_get, 2},
   {"R_swig_VBFA_getNp", (DL_FUNC) &R_swig_VBFA_getNp, 2},
   {"R_swig_VBFA_Nmax_iterations_set", (DL_FUNC) &R_swig_VBFA_Nmax_iterations_set, 2},
   {"R_swig_cWNodeSparse_pi_set", (DL_FUNC) &R_swig_cWNodeSparse_pi_set, 2},
   {"R_swig_VBFA_Alpha_set", (DL_FUNC) &R_swig_VBFA_Alpha_set, 2},
   {"R_swig_PEER_setSparsityPrior", (DL_FUNC) &R_swig_PEER_setSparsityPrior, 2},
   {"R_swig_PEER_getSparsityPrior", (DL_FUNC) &R_swig_PEER_getSparsityPrior, 1},
   {"R_swig_delete_cXNode", (DL_FUNC) &R_swig_delete_cXNode, 1},
   {"R_swig_new_cXNode__SWIG_0", (DL_FUNC) &R_swig_new_cXNode__SWIG_0, 0},
   {"R_swig_new_cWNode__SWIG_0", (DL_FUNC) &R_swig_new_cWNode__SWIG_0, 0},
   {"R_swig_new_cAlphaNode__SWIG_0", (DL_FUNC) &R_swig_new_cAlphaNode__SWIG_0, 0},
   {"R_swig_new_cEpsNode__SWIG_0", (DL_FUNC) &R_swig_new_cEpsNode__SWIG_0, 0},
   {"R_swig_new_cPhenoNode__SWIG_0", (DL_FUNC) &R_swig_new_cPhenoNode__SWIG_0, 0},
   {"R_swig_cWNode_A_last_set", (DL_FUNC) &R_swig_cWNode_A_last_set, 2},
   {"R_swig_cWNode_E_last_set", (DL_FUNC) &R_swig_cWNode_E_last_set, 2},
   {"R_swig_cWNode_XE2S_last_set", (DL_FUNC) &R_swig_cWNode_XE2S_last_set, 2},
   {"R_swig_new_cWNodeSparse__SWIG_0", (DL_FUNC) &R_swig_new_cWNodeSparse__SWIG_0, 0},
   {"R_swig_new_cXNode__SWIG_1", (DL_FUNC) &R_swig_new_cXNode__SWIG_1, 1},
   {"R_swig_new_cWNode__SWIG_1", (DL_FUNC) &R_swig_new_cWNode__SWIG_1, 1},
   {"R_swig_new_cAlphaNode__SWIG_1", (DL_FUNC) &R_swig_new_cAlphaNode__SWIG_1, 4},
   {"R_swig_new_cEpsNode__SWIG_1", (DL_FUNC) &R_swig_new_cEpsNode__SWIG_1, 4},
   {"R_swig_new_cPhenoNode__SWIG_1", (DL_FUNC) &R_swig_new_cPhenoNode__SWIG_1, 2},
   {"R_swig_new_cWNodeSparse__SWIG_1", (DL_FUNC) &R_swig_new_cWNodeSparse__SWIG_1, 3},
   {"R_swig_new_cXNode__SWIG_2", (DL_FUNC) &R_swig_new_cXNode__SWIG_2, 3},
   {"R_swig_delete_cWNode", (DL_FUNC) &R_swig_delete_cWNode, 1},
   {"R_swig_VERBOSE_set", (DL_FUNC) &R_swig_VERBOSE_set, 1},
   {"R_swig_VBFA_getPhenoVar", (DL_FUNC) &R_swig_VBFA_getPhenoVar, 1},
   {"R_swig_VBFA_setPhenoVar", (DL_FUNC) &R_swig_VBFA_setPhenoVar, 2},
   {"R_swig_VBFA_Nc_get", (DL_FUNC) &R_swig_VBFA_Nc_get, 2},
   {"R_swig_VBFA_setAdd_mean", (DL_FUNC) &R_swig_VBFA_setAdd_mean, 2},
   {"R_swig_VBFA_getAdd_mean", (DL_FUNC) &R_swig_VBFA_getAdd_mean, 2},
   {"R_swig_VBFA_pheno_set", (DL_FUNC) &R_swig_VBFA_pheno_set, 2},
   {"R_swig_delete_cAlphaNode", (DL_FUNC) &R_swig_delete_cAlphaNode, 1},
   {"R_swig_VBFA_getW", (DL_FUNC) &R_swig_VBFA_getW, 1},
   {"R_swig_VBFA_getX", (DL_FUNC) &R_swig_VBFA_getX, 1},
   {"R_swig_getVerbose", (DL_FUNC) &R_swig_getVerbose, 1},
   {"R_swig_setVerbose", (DL_FUNC) &R_swig_setVerbose, 1},
   {"R_swig_VBFA_setPriorAlphaA", (DL_FUNC) &R_swig_VBFA_setPriorAlphaA, 2},
   {"R_swig_VBFA_getPriorAlphaA", (DL_FUNC) &R_swig_VBFA_getPriorAlphaA, 2},
   {"R_swig_VBFA_setPriorAlphaB", (DL_FUNC) &R_swig_VBFA_setPriorAlphaB, 2},
   {"R_swig_VBFA_getPriorAlphaB", (DL_FUNC) &R_swig_VBFA_getPriorAlphaB, 2},
   {"R_swig_VBFA_initialisation_get", (DL_FUNC) &R_swig_VBFA_initialisation_get, 2},
   {"R_swig_delete_cPhenoNode", (DL_FUNC) &R_swig_delete_cPhenoNode, 1},
   {"R_swig_VBFA_Alpha_pb_set", (DL_FUNC) &R_swig_VBFA_Alpha_pb_set, 2},
   {"R_swig_VBFA_Eps_pb_set", (DL_FUNC) &R_swig_VBFA_Eps_pb_set, 2},
   {"R_swig_new_PEER", (DL_FUNC) &R_swig_new_PEER, 0},
   {"R_swig_VBFA_Alpha_pa_set", (DL_FUNC) &R_swig_VBFA_Alpha_pa_set, 2},
   {"R_swig_VBFA_Eps_pa_set", (DL_FUNC) &R_swig_VBFA_Eps_pa_set, 2},
   {"R_swig_cWNodeSparse_lpi_set", (DL_FUNC) &R_swig_cWNodeSparse_lpi_set, 2},
   {"R_swig_VBFA_getCovariates", (DL_FUNC) &R_swig_VBFA_getCovariates, 1},
   {"R_swig_VBFA_setCovariates", (DL_FUNC) &R_swig_VBFA_setCovariates, 2},
   {"R_swig_VBFA_getResiduals", (DL_FUNC) &R_swig_VBFA_getResiduals, 1},
   {"R_swig_VBFA_calc_residuals", (DL_FUNC) &R_swig_VBFA_calc_residuals, 2},
   {"R_swig_VBFA_getEps", (DL_FUNC) &R_swig_VBFA_getEps, 1},
   {"R_swig_VBFA_Np_set", (DL_FUNC) &R_swig_VBFA_Np_set, 2},
   {"R_swig_VBFA_setPriorEpsA", (DL_FUNC) &R_swig_VBFA_setPriorEpsA, 2},
   {"R_swig_VBFA_getPriorEpsA", (DL_FUNC) &R_swig_VBFA_getPriorEpsA, 2},
   {"R_swig_VBFA_init_params", (DL_FUNC) &R_swig_VBFA_init_params, 1},
   {"R_swig_VBFA_setPriorEpsB", (DL_FUNC) &R_swig_VBFA_setPriorEpsB, 2},
   {"R_swig_VBFA_getPriorEpsB", (DL_FUNC) &R_swig_VBFA_getPriorEpsB, 2},
   {"R_swig_cXNode_E2S_set", (DL_FUNC) &R_swig_cXNode_E2S_set, 2},
   {"R_swig_cWNode_E2S_set", (DL_FUNC) &R_swig_cWNode_E2S_set, 2},
   {"R_swig_PEER_setSigmaOff", (DL_FUNC) &R_swig_PEER_setSigmaOff, 2},
   {"R_swig_PEER_getSigmaOff", (DL_FUNC) &R_swig_PEER_getSigmaOff, 2},
   {"R_swig_PEER_getZ", (DL_FUNC) &R_swig_PEER_getZ, 1},
   {"R_swig_VBFA_calcBound", (DL_FUNC) &R_swig_VBFA_calcBound, 2},
   {"R_swig_cWNode_calcBound", (DL_FUNC) &R_swig_cWNode_calcBound, 3},
   {"R_swig_cXNode_calcBound", (DL_FUNC) &R_swig_cXNode_calcBound, 3},
   {"R_swig_PEER_calcBound", (DL_FUNC) &R_swig_PEER_calcBound, 2},
   {"R_swig_logdet", (DL_FUNC) &R_swig_logdet, 2},
   {"R_swig_cPhenoNode_E2_get", (DL_FUNC) &R_swig_cPhenoNode_E2_get, 2},
   {"R_swig_cWNodeSparse_tauOn_get", (DL_FUNC) &R_swig_cWNodeSparse_tauOn_get, 2},
   {"R_swig_cPhenoNode_E1_get", (DL_FUNC) &R_swig_cPhenoNode_E1_get, 2},
   {"R_swig_cXNode_prior_offset_set", (DL_FUNC) &R_swig_cXNode_prior_offset_set, 2},
   {"R_swig_VBFA_covs_set", (DL_FUNC) &R_swig_VBFA_covs_set, 2},
   {"R_swig_VBFA_Nk_set", (DL_FUNC) &R_swig_VBFA_Nk_set, 2},
   {"R_swig_delete_VBFA", (DL_FUNC) &R_swig_delete_VBFA, 1},
   {"R_swig_VBFA_Nj_set", (DL_FUNC) &R_swig_VBFA_Nj_set, 2},
   {"R_swig_VBFA_X_set", (DL_FUNC) &R_swig_VBFA_X_set, 2},
   {"R_swig_cWNodeSparse_C_get", (DL_FUNC) &R_swig_cWNodeSparse_C_get, 2},
   {"R_swig_VBFA_is_initialized_get", (DL_FUNC) &R_swig_VBFA_is_initialized_get, 2},
   {"R_swig_VBFA_W_set", (DL_FUNC) &R_swig_VBFA_W_set, 2},
   {"R_swig_cXNode_cov_set", (DL_FUNC) &R_swig_cXNode_cov_set, 2},
   {"R_swig_VBFA_pheno_mean_get", (DL_FUNC) &R_swig_VBFA_pheno_mean_get, 2},
   {"R_swig_VBFA_add_mean_get", (DL_FUNC) &R_swig_VBFA_add_mean_get, 2},
   {"R_swig_VBFA_covariate_prec_get", (DL_FUNC) &R_swig_VBFA_covariate_prec_get, 2},
   {"R_swig_cXNode_prior_prec_get", (DL_FUNC) &R_swig_cXNode_prior_prec_get, 2},
   {"R_swig_cWNode_Xprec_get", (DL_FUNC) &R_swig_cWNode_Xprec_get, 2},
   {"R_swig_VBFA_getAlpha", (DL_FUNC) &R_swig_VBFA_getAlpha, 1},
   {"R_swig_VBFA_Eps_get", (DL_FUNC) &R_swig_VBFA_Eps_get, 1},
   {"R_swig_VBFA_pheno_var_get", (DL_FUNC) &R_swig_VBFA_pheno_var_get, 2},
   {"R_swig_VBFA_Nc_set", (DL_FUNC) &R_swig_VBFA_Nc_set, 2},
   {NULL, NULL, 0}
};

extern "C" SWIGEXPORT void R_init_peer(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);


SWIG_init();
SWIG_InitializeModule(0);


}

